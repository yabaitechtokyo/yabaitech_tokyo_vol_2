@import: book-class

module Postscript : sig
  val article : block-text
end = struct

let article = '<
+chapter ?:(`postscript-article`) (|
    bibliography = [];
    title = {あとがき};
    author = {};
    |) <
+p{
  このたびはyabaitech.tokyo vol.2をご購入いただきありがとうございます。
  yabaitech.tokyoは大学院の(元)同期で構成されるゆるい集まりで，技術書展5から活動を始めた若いサークルです．
  ちなみに表紙の写真も大学院の同期のひとり(ただしこのサークルには無関係)なのですが，不思議な力によって美少女化されました．
  かわいいですね．
}
+p{
  yabaitech.tokyoの記事は(読めばわかる通り)なんとなくみんなが書きたいことを書くというちゃんぽんなものです．
  これはvol.1から変わってないです．
  ただし今回のvol.2では著者数がvol.1から比較してなんと3倍になっています．
  こんなにたくさん書きたがるなんてみんな暇ですね！すごい！
  もとい，アウトプットをしようという行動力とネタを探して実装する好奇心・やる気に満ち溢れる寄稿者の皆様方には感謝と尊敬の念を禁じえません．
}
+p{
  基本的にはガチめの記事が多いですが蓋を開けてみたら勝手にそうなってただけです．
  当然ですが，この同人誌のおかげで一番勉強になっているのは読者ではなく書いた本人だったりするので，読み手にとってのわかりやすさが最大限尊重されているとは言いがたいかもしれませんが，その場合は各々の著者に読者のみなさまが自分で文句を言ってください．
  たくさん文句を言って，著者の人間性を試しましょう．
}
+p{
  本誌の内容はそれなりにニッチなところを攻めているのでなかなか大きな反響というのは得られにくいことが想定されます．
  ほんの小さなものであってもなんらかのフィードバックが得られれば著者らは大変よろこぶでしょう．
  基本的に全員Twitterを監視していると思うので，本誌に関する感想はぜひTwitterやその他インターネット上にあげていただければとても励みになります．
}
+section{\SATySFi;について} <
+p{
  本誌はvol.1に引き続き\SATySFi;を用いて製作されました．
  \SATySFi;は\LaTeX;に変わる組版処理システムとして将来を期待されている新進気鋭のソフトウェアです．
  \LaTeX;はC言語以前の石器時代の言語である\TeX;上で無理やりプログラミングしなければならない点がめっさつらいのですが，一方の\SATySFi;は静的型システムと簡潔な意味論を持つシステムとして設計されておりいろんな部分が現代的でほとんどつらみがないです．
  \SATySFi;は前身となる組版処理システムを経て2017年に未踏事業で採択されたのち今なお改善が続けられ，ユーザーを増やし続けています．
  なお，\ref-chapter(`gfn-article`);を執筆しているgfnこそが\SATySFi;の生みの親です．
}
+p{
  本誌はおそらく\SATySFi;で組版された文章の中でもThe \SATySFi;book以来最大規模の文章だと思います．
  特に，複数人での作業フローや多様な種類の記事を前提としたプロジェクトは少なくとも今回の規模ではこれまでなかったと思います．
  そのおかげで制作中にはそこそこの数の\SATySFi;のバグを発見することができました．
  その意味ではヤバイテックトーキョーも\SATySFi;の改善に貢献していると言えます．
  本誌の(見かけ上の)出来上がりを参考に，\SATySFi;を使ってみようという方が増えれば幸いです．
  その際はぜひ本誌を複数冊ご購入いただき，\SATySFi;の布教活動に使用していただければと思います．
}
>
>
>

end
