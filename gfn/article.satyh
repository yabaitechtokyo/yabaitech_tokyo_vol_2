@import: local-gfn

let gfn-article = '<
  +chapter ?:(`gfn-article`) (|
    bibliography = gfn-bibliography;
    title = {多段階計算と可変参照のための型システム};
    author = {gfn};
  |) <
    +p{
      この記事では，一種のメタプログラミング的手法として使われる\dfnjaen{多段階計算}{multi-stage programming}と，
      手続き的プログラミングを実現する構成要素である\dfnjaen{可変参照}{mutable reference}とを共存させることについて扱います．
      これらを共存させたときに生じる問題と，
      その問題が実行時に生じないように静的な検査によって回避するための型システムについていくつかの既存研究を紹介し，
      またそれらの依然として弱点があると思われる点とそのおおまかな克服の方針について述べたいと思います．
      『型システム入門』\cite[`TaPL`; `TaPL-ja`];を或る程度読めるくらいの前提知識を想定して書いています．
    }
    +section{多段階計算の基礎}<
      +p{
        多段階計算は，概して言えば単純型つき${\lambda}計算のような一般的な計算体系に
        \dfnjaen{ステージ}{stage}という概念が備わっていて\footnote{
          細かいことを言うと，
          多段階計算の比較的早期の研究であるMetaML \cite[`Taha97PEPM`; `Taha00PEPM`];では
          stageとlevelという概念が区別されていて，
          ここで言うstageとはMetaMLでのlevelに相当するのですが，
          stageという語の方が現在では定着しているように見受けられるので，
          ここではstageの方を採用します．
        }，
        ステージがより低い部分にある式から順に計算が進んでいく，という仕組みをもつ計算体系の総称です．
        典型的には，各ステージは自然数\footnote{${0} を含みます．}に対応づけられており，
        第 ${n} ステージから見て ${n < m} なる各第 ${m} ステージは
        “生成されるコードの世界” に相当します．
        式の途中で「ここはステージを上げてコードにする」とか
        「ここはステージを下げて穴を開け，事前に計算しコードを生成して埋め込む」
        といった指示が書けるようになっており，
        これを用いてどの段階でどこの計算が進んでほしいかをプログラマが制御します．
      }
      +p{
        多段階の計算体系は，歴史的には
        与えられたプログラムのうち事前に（卑近な言い方をすればコンパイル時に）
        計算してよい部分を見つけて計算し実行時にできるだけ無駄な計算をせずに
        パフォーマンスを上げたいといった動機で研究されている
        \dfnjaen{部分評価}{partial evaluation}の文脈で登場し，
        与えられたプログラムの部分式で事前に計算できる部分をより低いステージに，
        事前には計算できない部分をより高いステージに割り当てる
        \dfnjaen{束縛時解析}{binding-time analysis}という処理の結果
        出てくる中間表現として用いられたようですが，
        プログラマが直接手書きするのにも有用であるとして，
        それ自体をソース言語或いはソース言語に近い中間表現とする研究が発展してきて今に至るようです．
      }
      +p{
        多段階計算には形式化の方法として様々な可能性があり，
        多段階プログラムの安全性を保証するための研究としては，
        既存の言語に適用できる何らかの検証手法を提案する（例えばより強力な型システムを与える）というよりも，
        保証したい性質に合わせて適切に制限された（それでいてできるだけ柔軟にプログラムが書ける）言語を設計し提案する傾向があります．
        そのため，研究の数だけ少しずつ異なる（構文と意味論さえ違いのある）言語が用意されているとさえ言えるのですが，
        構文・意味論・型システムを総合しておおよそ次の3種類のパターンに大別できると筆者は捉えています：
        \listing{
          * コードコンビネータ方式
          * \lambda-circle; \cite[`Davies96LICS`];やMetaML \cite[`Taha97PEPM`];に準ずる方式
          * \lambda-square; や\MetaML-square; \cite[`DaviesPfenning01JACM`];に準ずる方式
        }%
        以降でこれらの定式化をそれぞれ簡単に紹介したいと思います．
      }
      +subsection{コードコンビネータ方式}<
        +p{
          \dfn{コードコンビネータ方式}は最も簡素なもので，
          これまで全く多段階計算について親しみのなかった方にとっても
          最初の理解のステージに立つのに有用と思われるので真っ先に紹介します．
          大雑把な定式化を採用するなら，コードを以下で定義されるような
          代数的データ型\code(`code`);で扱うという方法をとります\footnote{
            要するに\code(`code`);型は式をデータとして表すための型です．
            いわゆる函数型言語の言語処理系を実装したことのある方なら
            ものすごく見慣れた感じの定義かと思います．
          }．
          ここでの定式化は（一般の多段階ではなく）
          ${2} 段階のプログラムを書く用途に特化したものとなっています．
          実際には ${\lambda U} \cite[`Calcagno03GPCE`];のように
          この方式の延長で多段階プログラムを扱うこともできますが，簡単のため省きます：

          \d-code(```
            type code =
              | Var   of symbol
              | Abs   of symbol * code
              | App   of code * code
              | Int   of int
              | Plus  of code * code
              | Times of code * code
              …
          ```);%

          ここで\code(`symbol`);は
          生成されるコード中での変数である\dfnjaen{シンボル}{symbol}につける型で，
          番号や文字列など何らかの識別子が実体であると考えてください．
          具体的に ${2} 段階プログラムを書くにあたっては

          \d-code(```
            val gensym : unit -> symbol
          ```);%

          を用いてシンボルを生成します．
          これは呼び出しのたびにフレッシュなシンボルを生成してくれるプリミティヴです\footnote{
            Lisp系言語の素養があってマクロを実装する読者の方なら
            まさに \code(`(gensym)`); という無引数の函数呼び出しで
            シンボルを生成しているでしょうから馴染みがあるかと思います．
          }．
          上に掲げた\code(`code`);型の定義の例には，通常の${\lambda}項に対応する
          \code(`Var`);，\code(`Abs`);，\code(`App`);に加えて，
          \code(`Int`);や\code(`Plus`);などの
          整数に関する算術プリミティヴを表すコンストラクタが備わっていますが，
          勿論必要に応じて真偽値や文字列など種々のデータ型と
          それらに関する演算に拡張することもできますし，
          形式的に扱う上では簡単のため除去してもかまいません．
        }
        +p{
          このような定式化で実際に ${2} 段階プログラムを書いた具体例として，
          非負整数 ${n} を受け取って「${n}乗函数のコード」を返す函数
          \code(`genpower`); を挙げます：

          \d-code(```
            let rec aux n x =
              if n <= 0 then Int(1) else
                Times(Var(x), aux (n - 1) x)

            let genpower n =
              let x = gensym () in
              Abs(x, aux n x)
          ```);%

          この\code(`genpower`);は，例えば \code(`3`); を渡すと

          \d-code(```
            Abs(X, Times(Var(X), Times(Var(X), Times(Var(X), Int(1)))))
          ```);%

          という，
          ${\lambda m.\ m \ast m \ast m \ast 1}
          に相当するコードが生成される，という具合に振舞います．
        }
        +p{
          生成されたコードを用いる方法のひとつとして
          \dfnjaen{ラン・プリミティヴ}{Run primitive}という機構があります．
          これは与えられたコード断片を使うために下のステージへと “下ろしてくる” 仕組みで，
          例えば

          \d-code(```
            let f = run (genpower n) in
            …
          ```);%

          で（\code(`n`);が束縛されている非負整数値を ${n} とすると）
          \code(`f`);に ${n} 乗函数を束縛して\code(`in`);以降を評価します．
          重要なのは，上記の実装が，多段階になっていない\code(`power`);函数：

          \d-code(```
            let rec power n x =
              if n <= 0 then 1 else x * power (n - 1) x
          ```);%

          を用いて

          \d-code(```
            let f = power n in
            …
          ```);%

          と書いた場合と比べると（どんな計算結果を得るかに関して振舞いは同一でも）
          パフォーマンスの改善が見込めるということです．
          後者だと\code(`f`);が適用されるたびに ${n} 周再帰が回りますが，
          前者ではコードが生成されるときに再帰が回るのみであり，
          そのコードが\code(`run`);で下ろされてくるので\code(`f`);は

          \d-code(```
            (fun x -> x * x * … * x * 1)  (* xがn個並ぶ *)
          ```);%

          という函数に束縛されることになり，
          したがって以降\code(`f`);が適用されるときに逐一再帰が回ったりはしないのです．
          時間計算量に差が現れるというわけではありませんが，
          前者は後者と違い再帰を終えるかどうかの条件分岐を判定する必要がないため，
          \code(`f`);の適用が何度も起こるようなプログラムでは
          その分処理が高速になることが期待できるというわけです．
          勿論後者のようなステージングしない実装でも
          最適化が効いてナイーヴで処理の重い再帰にならずに済むことはよくありますが，
          それでも前者のようなステージングを施した実装の方が概して速く動作することは
          実験的にも確かめられているようです \cite[`Calcagno03GPCE`];．
          メタプログラミングの動機が必ずしもパフォーマンスにあるとは限りませんが，
          少なくともパフォーマンスはひとつのわかりやすい動機ではあるということです．
        }
      >
      +subsection{ナイーヴなコードコンビネータ方式の問題点}<
        +p{
          多段階計算のおおまかな仕組みは前節で導入したとおりですが，
          前節のようなナイーヴなコードコンビネータ方式には
          はっきりと2つの弱点があります：

          \listing{
            * 生成されるコードが型のつくコードとは限らない
            * 生成されるコードが閉じたコードとは限らない
          }%

          まず前者に関しては単純で，次のような例が問題になります：

          \d-code(```
            Plus(Int(1), True)
          ```);

          後者に関しても，次のような例が問題になります：

          \d-code(```
            let x = gensym () in run (Var(x))
          ```);

          要するに束縛されていないシンボルが出現するコードを走らせてしまえるのです．
          いずれも，一応言語設計を適切に改めることで防ぐことができます．
          前者の解決は簡単で，“生成するコード片の型もその整合性を静的に検査” すればよいです．
          要するに

          \d-code(```
            type 'a code
            type 'a symbol
          ```);

          という1つの型を引数にとる型コンストラクタ \code(`code`); と \code(`symbol`);
          でそれぞれコードとシンボルを扱うことにし，
          \code(`Var`);，\code(`App`);，\code(`Plus`);，\code(`Int`); \code(`True`);
          などの代わりに

          \d-code(```
            val genVar : 'a symbol -> 'a code
            val genApp : ('a -> 'b) code -> 'a code -> 'b code
            val genPlus : int code -> int code -> int code
            val genInt : int -> int code
            val genTrue : bool code
            ...
          ```);

          といったインターフェイスでコード片を生成するための各種プリミティヴをプログラマに提供します．
          これにより，型のつかないコードを生成してしまう上記のプログラムに対応する以下のようなプログラムを
          型検査時に弾けます：

          \d-code(```
            genPlus (genInt 1) genTrue
          ```);

          後者も（可変参照や限定継続といった複雑な言語機能と共存させない限りは）そんなに難しい話ではなく，
          “そもそもラムダ抽象のコードと同時にしかシンボルを生成しない” ことによって解決します．
          要するにプログラマには “生の \code(`gensym`); と \code(`Abs`);” は書けないようにし，
          代わりに

          \d-code(```
            let genAbs k =
              let x = gensym () in Abs(x, k x)
          ```);

          なる函数 \code(`genAbs`); に相当する機構だけ言語機能として

          \d-code(```
            val genAbs : ('a symbol -> 'b code) -> ('a -> 'b) code
          ```);

          というインターフェイスで提供すれば
          シンボルが束縛されずに使われる心配はありません．
          こうした \code(`genApp`); や \code(`genAbs`); のようなコード生成に関する
          （コードコンストラクタが型などに関して適切にラップされた）函数を
          \dfnjaen{コードコンビネータ}{code combinator}と呼び，
          これを用いたインターフェイスをもつ多段階計算の定式化を本記事では\dfn{コードコンビネータ方式}と呼んでいます．
        }
      >
      +subsection{\lambda-circle;・MetaML方式}<
        +p{
          （すみません，執筆時間が足りなかったため元論文を参照されたいです…… 一応，以降の話には理解しておく必要はありません）
        }
      >
      +subsection{\lambda-square;・\MetaML-square;方式}<
        +p{
          （すみません，執筆時間が足りなかったため元論文を参照されたいです…… 一応，以降の話には理解しておく必要はありません）
        }
      >
    >
    +section{多段階計算＋可変参照}<
      +subsection{可変参照による問題点の再来}<
        +p{
          ここまでは多段階の計算体系について紹介するとともに，
          その過程で如何にして不適格なコードの生成を静的に防げるように構文や型システムが設計されているかについて見てきました．
          しかし，これらの多段階の計算体系に可変参照をナイーヴに追加すると，型安全性が再び崩れ去ってしまいます．
          多段階の計算体系に単純に

          \listing{
            * \term(Term.(ref tme));
            * \term(Term.(deref tme));
            * \term(Term.(assign tme tmep));
          }

          を追加すると，例えば次のような安全でないコードを生成するプログラムが型検査を通ってしまいます：

          \d-code(```
            let r = ref <0> in
            let _ = <fun x -> ~(r := <x>; <1>)> in
            !r
          ```);

          このプログラムは型検査を通りますが，評価すると \code(`<x>`);，
          つまり束縛されていないシンボルの出現だけからなるコードが生成されてしまいます．
          要するにシンボル \code(`x`); が可変参照\code(`r`);を通じて
          そのシンボルのスコープではないところに “漏れ出て” しまうのです．
          この現象を\dfnjaen{スコープ脱出}{scope extrusion}と呼びます．
          スコープ脱出をきたす上のようなプログラムを型検査で弾けないと，
          後のステージの評価中に実際にこのコードが使われた時に
          自由変数の出現で計算がスタックし実行時エラーを生じてしまいます\footnote{
            実際，OCamlをMetaMLと同様の多段階計算で拡張したMetaOCaml \cite[`MetaOCaml`];の型検査器は
            ここに挙げた問題のプログラムも受理してしまい，
            自由変数の出現は動的にエラーを吐きます．
          }．こういったスコープ脱出を起こすプログラムを型検査によって静的に防ぎたいというのが本記事の動機なのでした．
          次節以降ではこの動機に関する既存研究で提案された型システムのうち2つを紹介します．
          さらに，それらのもつ若干の弱点を挙げ，
          形式化できているわけではないですがその弱点を克服しうる個人的着想を簡単に述べたいと思います．
        }
      >
      +subsection{既存研究1：〈NJ〉}<
        +p{
          \dfn{〈NJ〉}\cite[`KiselyovKameyamaSudo16APLAS`];はコードコンビネータ方式をベースとし可変参照を含む2段階計算に対する単相の型システムで，
          前節で挙げたようなシンボルがそのスコープを漏れ出てしまうプログラムを弾くための機構が備わっています．
          具体的には\dfnjaen{環境分類子}{environment classifier} \cite[`TahaNielsen03POPL`];によく似た仕組みを応用することによって
          スコープ脱出を防ぎます．
          各コード部分につく型には “（シンボルの出現に関して）それが有効なスコープ” を示す分類子がつけられ，
          スコープに関して不整合があるプログラム，
          つまり何らかのコードが本来出現してよいスコープよりも広いスコープで使われようとしているプログラムは，
          型検査器が弾いてくれるのです．
        }
        +subsubsection{構文}<
          +p{
            まず，式，値，型の構文は以下で定義されます：

            \BNFs[
              Term.((show tme, [
                [tmc; prim ${p} [tme; !${\ldots}; tme]; tml;
                  !${x}; lam ${x} tme; app tme tme;
                  lamC1 ${x} tme; lamC2 ${x} tme; codeF tme] |> List.map show;
              ]));
              Term.((show tmv, [
                [tmc; tml; lam ${x} tme; codeF tme] |> List.map show;
              ]));
              Type.((show tymtau, [
                [tymb; tymtau --> tymtau; ref tymtau; codeS tymtau ${\gamma}] |> List.map show;
              ]));
            ];

            型の構文に含まれるコードの型 \type(Type.(codeS tymtau ${\gamma})); の ${\gamma} が重要であり，
            これが環境分類子に相当するのですが，型については一旦置いておき，先に式の構文と操作的意味論について触れましょう．
            \term(Term.(tml));は可変参照を扱うための所謂\dfnjaen{ロケーション}{location}です．
            \term(Term.(prim ${p} [tmesub ${1}; !${\ldots}; tmesub ${m}])); は
            アリティ ${m \paren{\geq 1}} のプリミティヴの適用であり，簡単のため部分適用はできないものとします\footnote{
              部分適用したい場合は
              \term(Term.(let-in ${p'}
                (lam ${x_1} !${\ldots \mterm!(lam ${x_n}
                  (prim ${p} [!${x_1}; !${\ldots}; !${x_n}]))}) None));
              の要領で別の変数に束縛しなおせばよいです．
            }．
            基本型のデータに対する算術演算や，
            可変参照に対する操作
            \term(Term.(ref tme));，\term(Term.(deref tme));，\term(Term.(assign tme tmep));
            は
            いずれもプリミティヴ \term(Term.(prim ${p} [tme; !${\ldots}; tme])); の構文に吸収して扱います\footnote{
              記事中の記述では
              \term(Term.(prim ${\mathord{+}} [tmesub ${1}; tmesub ${2}])); を
              \term(Term.(bin ${+} (tmesub ${1}) (tmesub ${2}))); に，
              \term(Term.(prim ${\Term.token{ref}} [tme])); を \term(Term.(ref tme)); に，
              \term(Term.(prim ${\mathord{\Term.token{\coloneq}}} [tme; tmep])); を
              \term(Term.(assign tme tmep)); に，といった具合で適宜読みやすい形に書き換えます．
            }．
            コードコンビネータも原則としてプリミティヴ ${p} として与えられ，適切な型をもちます（後述）．
            例外はラムダ抽象のコードを生成するコードコンビネータで，
            シンボルのスコープを適切に制御するために特殊な仕組みが取られています．
            \term(Term.(lamC1 ${x} tme)); がラムダ抽象のための特殊なコードコンビネータで，
            おおよそ \code(`genAbs (fun x -> e)`); に相当し，
            プログラマがステージ1でのラムダ抽象として書くのはこれです．
            \term(Term.(lamC2 ${x} tme)); は評価中にのみ現れるラムダ抽象のコード生成に関する中間生成物であり，
            こちらはプログラマが直接書くものではありません．
            \term(Term.(codeF tme)); は “既に完成しているコード片” であり，値であることに注意してください\footnote{
              感覚的には \term(Term.(codeF tme)); はMetaMLの \term(Term.(code tme)); と同じですが，
              \term(Term.(tme)); にはMetaMLの場合と違いエスケープが含まれておらず，
              それゆえにもう内側が評価されない “既に完成しているコード片” の値なのです．
              元論文 \cite[`KiselyovKameyamaSudo16APLAS`];ではMetaMLと同様の \term(Term.(code tme)); で書かれていますが，
              誤解をきたさないように記法上区別することにしました．
            }．
            なお，元論文 \cite[`KiselyovKameyamaSudo16APLAS`];では計算体系に含めている条件分岐は簡単のため省略していますが，
            自明な拡張で入れることができます．このほか，再帰のための不動点はプリミティヴのひとつとして扱えます．
          }
        >
        +subsubsection{操作的意味論}<
          +p{
            さて，それでは操作的意味論を見てみます．評価文脈を使った小ステップ意味論で形式化されています．
            評価文脈は次で与えられます：

            \BNFs[
              Term.((show tmE, [
                [app tmE tme; app tmv tmE;
                  prim ${p} [tmv; !${\ldots}; tmv; tmE; tme; !${\ldots}; tme];
                  lamC2 ${x} tmE] |> List.map show;
              ]));
            ];

            評価規則は
            ${\redNJ{N}{\store}!(Term.(tme)){N'}{\store'}!(Term.(tmep))}
            の形で与えられ，${N} が既に使用したシンボル名を重複防止のために保持しておく集合，
            ${\store} がいわゆる可変参照のための\dfnjaen{ストア}{store}（つまりロケーションから値への有限部分写像）です：

            \eqn(${
              \derive{|
                \redNJ{N}{\store}!(Term.(tme)){N'}{\store'}!(Term.(tmep))
              |}{
                \redNJ{N}{\store}!(Term.(subst-hole tmE tme)){N'}{\store'}!(Term.(subst-hole tmE tmep))
              }
            });
            \align[
              ${||
                \redNJ{N}{\store}!(Term.(app (lam ${x} tme) tmv)){N}{\store}!(Term.(subst tmv ${x} tme))
              |};${||
                \redNJ{N}{\store}!(Term.(ref tmv))%
                  {N}{\overwrite{\store}{l}{\mterm!(Term.(tmv))}}!(Term.(tml))
              | \paren{l \nin \dom \store}
              |};${||
                \redNJ{N}{\store}!(Term.(deref tml))%
                  {N}{\store}!(Term.(tmv))
              | \paren{\app{\store}{l} \synteq \mterm!(Term.(tmv))}
              |};${||
                \redNJ{N}{\store}!(Term.(assign tml tmv))%
                  {N}{\overwrite{\store}{l}{\mterm!(Term.(tmv))}}!(Term.(tmv))
              | \paren{l \in \dom \store}
              |};${||
                \redNJ{N}{\store}!(Term.(lamC1 ${x} tme))%
                  {N \uplus \set{Y}}{\store}!(Term.(lamC2 ${Y} (subst !${Y} ${x} tme)))
              | \paren{Y \nin N}
              |};${||
                \redNJ{N}{\store}!(Term.(lamC2 ${Y} (codeF tme)))%
                  {N}{\store}!(Term.(codeF (lam ${Y} tme)))
              |};
            ];
            ラムダ抽象に関する評価について簡単に述べると，\term(Term.(lamC1 ${x} tme)); はステージ0の式で，
            評価されるとフレッシュなシンボル ${Y} を生成して変数 ${x} をそのシンボルに束縛します．
            すなわち元の式を \term(Term.(lamC2 ${Y} (subst !${Y} ${x} tme))); という形に置き換え，
            本体の \term(Term.(subst !${Y} ${x} tme)); を評価します．
            評価結果が \term(Term.(codeF tmep)); という形で返ってきたら，
            ステージ1のラムダ抽象 \term(Term.(codeF (lam ${Y} tmep))); として完成させる，という算段になっています．
            簡単のため，シンボル（ステージ1の変数）もステージ0の変数と同一の名前集合を動くものとして扱っています．
          }
          +p{
            ラムダ抽象以外のコードコンビネータはプリミティヴの一部として扱うことにしていましたが，
            操作的意味論は以下のような要領で定義します（必要になれば同様の方法で定義していくらでも足せます）：

            \align[
              ${||
                \redNJ{N}{\store}!(Term.(prim ${genInt} [!${n}])){N}{\store}!(Term.(codeF !${n}))
              |};${||
                \redNJ{N}{\store}!(Term.(prim ${genPlus} [codeF (tmesub ${1}); codeF (tmesub ${2})]))%
                  {N}{\store}!(Term.(codeF (bin ${+} (tmesub ${1}) (tmesub ${2}))))
              |};${||
                \redNJ{N}{\store}!(Term.(prim ${genApp} [codeF (tmesub ${1}); codeF (tmesub ${2})]))%
                  {N}{\store}!(Term.(codeF (app (tmesub ${1}) (tmesub ${2}))))
              |};
            ];
          }
        >
        +subsubsection{型システム}<
          +p{
            一番重要なのが型システムです．型判定はステージ0が
            ${\tjNJ0{\NameHeap}{\StoreTy}{\tyenv}!(Term.(tme))!(Type.(tymtau))}，
            ステージ1が
            ${\tjNJ1{\NameHeap}{\tyenv}{\gamma}!(Term.(tme))!(Type.(tymtau))}
            の形をとります．この2つの5項関係に於いて，
            ${\tyenv} が型環境，
            ${\StoreTy} が\dfnjaen{ストア型つけ}{store typing}
            なのは可変参照をもつ体系の一般的な定式化で馴染みがありますが，
            ここでは新たに ${\NameHeap} という形で
            \dfnjaen{名前ヒープ型つけ}{name heap typing}という概念が追加されています．
            名前ヒープ型つけと型環境は互いによく似ており，
            名前ヒープ型つけは以下の(1)か(2)の形を，
            型環境は以下の(1)–(3)のいずれかの形を各要素とする有限列です\footnote{
              元論文 \cite[`KiselyovKameyamaSudo16APLAS`];とは少しだけ形式化を変えています．
              ここでの ${\bind-scope{\gamma}{\gamma'}} は元論文での
              ${\gamma, \gamma \succ \gamma'} という2要素に相当します．
            }：

            \enumerate{
              * ${ \bind-scope{\gamma}{\gamma'} }
              * ${ \bind1{Y}!(Type.(tymtau)){\gamma} }
              * ${ \bind0{x}!(Type.(tymtau)) }
            }

            ${\bind-scope{\gamma}{\gamma'}} は直観的には
            「すでにあるスコープ ${\gamma'} の “すぐ上” に新しいスコープ ${\gamma} を設ける」
            を指します．
            (2)はステージ1での変数の型つけに相当し，${\gamma} はその変数が有効なスコープを表します．
            (3)はステージ0での変数の型つけに相当します．
            型環境と名前ヒープ型つけには，次のような規則でwell-formednessを要請します．
            簡単に言えば，同一のスコープ名は多重に ${\bind-scope{}{}} で新設されたりしないことを表します\footnote{
              well-formednessの定義は元論文 \cite[`KiselyovKameyamaSudo16APLAS`];でもやや記述が不明瞭で，
              正確か検証できていませんがひとまず掲載しています．
            }：

            \math-list(${
            |
              \derive{|}{\wf{\epsilon}}
            |
              \derive{
              | \wf{\NameHeap}
              | \funIn{\gamma'}{\NameHeap}
              | \funNotIn{\gamma}{\NameHeap}
              |}{
                \wf{\concat{\NameHeap}{\paren{\bind-scope{\gamma}{\gamma'}}}}
              }
            |
              \derive{
              | \wf{\NameHeap}
              | \funIn{\gamma}{\NameHeap}
              | \funNotIn{Y}{\NameHeap}
              |}{
                \wf{\concat{\NameHeap}{\bind1{Y}!(Type.(tymtau)){\gamma}}}
              }
            |
              \derive{|}{
                \wfenv{\NameHeap}{\epsilon}
              }
            |
              \derive{
              | \wfenv{\NameHeap}{\tyenv}
              | \funIn{\gamma'}{\tyenv, \NameHeap}
              | \funNotIn{\gamma}{\NameHeap}
              | \funNotIn{\gamma}{\tyenv}
              |}{
                \wfenv{\NameHeap}{\concat{\tyenv}{\paren{\bind-scope{\gamma}{\gamma'}}}}
              }
            |
              \derive{
              | \wfenv{\NameHeap}{\tyenv}
              | \text!{\type(Type.(tymtau)); 中の各 ${\gamma} に対して ${\funIn{\gamma}{\tyenv, \NameHeap}}}
              |}{
                \wfenv{\NameHeap}{\concat{\tyenv}{\bind0{x}!(Type.(tymtau))}}
              }
            |
              \derive{
              | \wfenv{\NameHeap}{\tyenv}
              | \funIn{\gamma}{\tyenv, \NameHeap}
              |}{
                \wfenv{\NameHeap}{\concat{\tyenv}{\bind1{Y}!(Type.(tymtau)){\gamma}}}
              }
            |});

            ${\funIn{\gamma}{\tyenv}} は ${\gamma} が ${\tyenv} で新設されていることを，
            ${\funIn{\gamma}{\tyenv, \NameHeap}} は ${\gamma} が
            ${\tyenv} 或いは ${\NameHeap} で新設されていることを表します．
            また，ストア型つけは特に変哲なくロケーションに型を紐づける写像です．
          }
          +p{
            名前ヒープ型つけの直観を獲得するのはやや難しいですが，ひとことで言うなら
            “既にグローバルに確定しているスコープの上下関係を保持している機構” であり，
            主簡約定理 (subject reduction) を証明する上で本質的な役割を果たします\footnote{
              型保存の観点で言うと，プログラムの評価が進むにつれて
              そのプログラムの型判定に使われる名前ヒープ型つけが大きくなっていきます．
              詳細に記述するとかなり長くなるので，
              気になる読者は実際に元論文 \cite[`KiselyovKameyamaSudo16APLAS`];の主簡約定理の証明を追うとよいかもしれません．
            }．
            なお，“最も外側のスコープ” は ${\gamma_0} という名前で固定され，
            必ず名前ヒープ型つけに入っている（${\epsilon} でも ${\gamma_0} は設けられて入っている）という特別な扱いをします．
          }
          +p{
            ともあれ，型つけ規則を見てみましょう（一部省略）：

            \math-list(${
            |
              \derive{
              | \funConstType{c} \synteq \mtype!(Type.(tymtau))
              |}{
                \tjNJ0{\NameHeap}{\StoreTy}{\tyenv}!(Term.(tmc))!(Type.(tymtau))
              }
            |
              \derive{
              | \funConstType{c} \synteq \mtype!(Type.(tymtau))
              |}{
                \tjNJ1{\NameHeap}{\tyenv}{\gamma}!(Term.(tmc))!(Type.(tymtau))
              }
            |
              \derive{
              | \bind0{x}!(Type.(tymtau)) \text!{\ in\ } \tyenv
              |}{
                \tjNJ0{\NameHeap}{\StoreTy}{\tyenv}!(Term.(!${x}))!(Type.(tymtau))
              }
            |
              \derive{
              | \bind1{Y}!(Type.(tymtau)){\gamma} \text!{\ in\ } \tyenv, \NameHeap
              |}{
                \tjNJ1{\NameHeap}{\tyenv}{\gamma}!(Term.(!${Y}))!(Type.(tymtau))
              }
            |
              \derive{
              | \tjNJ1{\NameHeap}{\tyenv}{\gamma}!(Term.(tme))!(Type.(tymtau))
              |}{
                \tjNJ0{\NameHeap}{\StoreTy}{\tyenv}!(Term.(codeF tme))!(Type.(codeS tymtau ${\gamma}))
              }
            |
              \derive{
              | \tjNJ1{\NameHeap}{\tyenv}{\gamma'}!(Term.(tme))!(Type.(tymtau))
              | \subscope{\NameHeap}{\gamma}{\gamma'}
              |}{
                \tjNJ1{\NameHeap}{\tyenv}{\gamma}!(Term.(tme))!(Type.(tymtau))
              }
            |
              \derive{
              | \tjNJ0{\NameHeap}{\StoreTy}{\tyenv}!(Term.(tme))!(Type.(codeS tymtau ${\gamma'}))
              | \subscope{\NameHeap}{\gamma}{\gamma'}
              |}{
                \tjNJ0{\NameHeap}{\tyenv}{\gamma}!(Term.(tme))!(Type.(codeS tymtau ${\gamma}))
              }
            |
              \derive{
              | \tjNJ0{\NameHeap}{\StoreTy}{\concat{\tyenv}{\bind0{x}!(Type.(tymtaup))}}!(Term.(tme))!(Type.(tymtaup))
              |}{
                \tjNJ0{\NameHeap}{\StoreTy}{\tyenv}!(Term.(lam ${x} tme))!(Type.(tymtaup --> tymtau))
              }
            |
              \derive{
              | \tjNJ1{\NameHeap}{\concat{\tyenv}{\bind1{Y}!(Type.(tymtaup)){\gamma}}}{\gamma}!(Term.(tme))!(Type.(tymtaup))
              |}{
                \tjNJ1{\NameHeap}{\tyenv}{\gamma}!(Term.(lam ${Y} tme))!(Type.(tymtaup --> tymtau))
              }
            |
              \derive{
              | \tjNJ0{\NameHeap}{\StoreTy}{
                  \concats{|\tyenv|\paren{\bind-scope{\gamma}{\gamma'}}|\bind0{x}!(Type.(codeS tymtaup ${\gamma}))|}
                }!(Term.(tme))!(Type.(codeS tymtau ${\gamma}))
              |}{
                \tjNJ0{\NameHeap}{\StoreTy}{\tyenv}!(Term.(lamC1 ${Y} tme))!(Type.(codeS (tymtaup --> tymtau) ${\gamma'}))
              }
            |
              \derive-multi!(11cm){
              | \NameHeap \synteq \concats{|\NameHeap_1|\paren{\bind-scope{\gamma}{\gamma'}}|\bind0{Y}!(Type.(codeS tymtaup ${\gamma}))|\NameHeap_2|}
              | \forall \gamma''.\ \paren{\subscope{\NameHeap}{\gamma}{\gamma''} \ \text!{and}\ \gamma \nsynteq \gamma'' \Rightarrow \subscope{\NameHeap}{\gamma'}{\gamma''}}
              | \tjNJ0{\NameHeap}{\StoreTy}{\epsilon}!(Term.(tme))!(Type.(codeS tymtau ${\gamma}))
              |}{
                \tjNJ0{\NameHeap}{\StoreTy}{\epsilon}!(Term.(lamC2 ${Y} tme))!(Type.(codeS (tymtaup --> tymtau) ${\gamma'}))
              }
            |});

            スコープの “弱化” に相当する規則（要するに “狭いスコープで有効なシンボルはより広いスコープでも有効” という規則）
            が両ステージにあるほか，
            やはりラムダ抽象とそのコードコンビネータが重要です．\term(Term.(lamC1 ${x} tme)); の型検査では
            ${x} に束縛されるシンボルのために新しいスコープ ${\gamma} が外のスコープ ${\gamma'} のすぐ上に新設されて
            \term(Term.(tme)); が走査されます．\term(Term.(lamC2 ${Y} tme));は中間表現なので
            プログラマにはあまり関係がなく，主簡約定理を証明するためにある規則です．
            ${\NameHeap} はどの規則でも上下で変わっていませんが，
            これも主簡約定理で簡約に従って適切に大きく取れるようにするための機構です．
          }
          +theorem?:({主簡約}){
            ${\tjNJ0{\NameHeap}{\StoreTy}{\epsilon}!(Term.(tme))!(Type.(tymtau))}，
            ${\wfenv{\NameHeap}{\tyenv}}，およびストア型つけ
            ${\StoreTy} が適切に ${\NameHeap} と ${\tyenv} に整合しているとき
            \footnote{ストア型つけの整合性はわりと一般的な定義どおりです．}，
            或る ${\NameHeap'}，${\tyenv'}，${\StoreTy' \supseteq \StoreTy} が存在して
            ${\tjNJ1{\concat{\NameHeap}{\NameHeap'}}{\StoreTy'}{\concat{\tyenv}{\tyenv'}}!(Term.(tme))!(Type.(tymtau))}
            かつ ${\wfenv{\NameHeap}{\tyenv}} を満たし， ${\StoreTy'} が ${\concat{\NameHeap}{\NameHeap'}} と
            ${\concat{\tyenv}{\tyenv'}} に整合する．
          }
          +corollary{
            ${\tjNJ0{\epsilon}{\emptyset}{\epsilon}!(Term.(tme))!(Type.(codeS tymtau ${\gamma_0}))}
            および ${\redNJstar{\emptyset}{\emptyset}!(Term.(tme)){N}{\store}!(Term.(tmv))} ならば，
            \term(Term.(tmv));は \term(Term.(codeF tmep)); の形であり，
            ${\tjNJ1{\epsilon}{\emptyset}{\emptyset}!(Term.(tmep))!(Type.(tymtau))} が成り立つ．
          }
          +p{
            以上の定理により型検査を通ったプログラムはスコープ脱出を起こさないことが保証されています．
            実際に最初に掲げたスコープ脱出をしてしまう例に相当するプログラム：

            \display-term(Term.(
              app (lam ${r} (app (lam ${a} (deref !${r})) (lamC1 ${x} (assign !${r} !${x})))) (ref (prim ${genInt} [!${0}]))
            ));

            を型検査すると，\term(Term.(assign !${r} !${x}));の下りの時点でスコープに不整合が起きて弾かれます．
            \term(Term.(deref !${r}));で使っている箇所が原因となって型エラーが出るわけではないことも重要なのですが，
            詳しく触れる執筆時間がなかったので元論文を参照されたいです，すみません．
          }
        >
      >
      +subsection{既存研究2：\lambda-open-poly;}<
        +p{
          \dfn{\lambda-open-poly;} \cite[`Kim06POPL`];は，一転して
          \MetaML-square;をベースにした可変参照を含む多段階計算に対する型システムです．
          執筆時間の都合であまり詳しく触れることはできませんが，
          Lisp諸方言のようにシンボルを陽に名前で扱うことに特徴があり，
          環境分類子のかわりに「どんな名前でどんな型をもつシンボルの集合が出現しうるか」の情報を
          レコード型のような形式でコード型にくっつけて持ち回ります．
          詳しくは論文を参照されたいのですが，特に次のような望ましい性質を満たしていることが大きな有用性です：

          \listing{
            * 安全な局所的\code(`run`);ができる
            * 主要型が存在し，型推論可能
          }

          型推論に関しては，\dfnjaen{列多相}{row polymorphism}の知見を利用することで実現しています．
          弱点となりうる点としては，シンボル名を変えると型も変わるので
          複雑なプログラムの読み書きをしていると変数名を変更してよいのかがすぐにはわからないであろうこと，
          型エラーがかなり煩雑になるであろうことが挙げられます\footnote{
            あくまで可能性です．定性的な話なので，実際に型推論器を実装して使ってみないと実感としてはわかりません．
          }．
        }
      >
      +subsection{改善の可能性}<
        +p{
          前節までに紹介したように，〈NJ〉の型システムはスコープ脱出を静的に防げるのですが，
          やや厳しすぎる（つまり妥当なプログラムも弾きすぎる）側面があります．
          例えば，次のプログラムは特にスコープ脱出を起こさないにもかかわらず型検査に通りません：

          \display-term(Term.(
            app (lam ${k} (lamC1 ${x} (app !${k} !${x}))) (lam ${y} (lamC1 ${z} !${y}))
          ));

          要するに\term(Term.(lam ${k} (lamC1 ${x} (app !${k} !${x}))));
          しかし，これが型検査に通らないのも或る程度うなずけることではあります．
          というのは，次のようなよく似た例がスコープ脱出を引き起こしてしまうためです：

          \display-term(
            Term.(
            app (lam ${r} (app (lam ${k} (lamC1 ${x} (app !${k} !${x}))) (lam ${y} (assign !${r} !${y}))))
                (prim ${genInt} [!${0}])
            )
          );

          〈NJ〉の厳しすぎる型検査を或る程度まともに緩和するには，上に掲げた前者のプログラムは通すが後者のプログラムは弾かないといけなさそうなわけです．これを実現するには，単なる函数の型ではなく，
          所謂 “副作用” を引き起こす函数であるかどうかまで型レヴェルで区別する必要がありそうです．したがって

          \listing{
            * 可変参照をモナディックに扱うことにする
            * type and effect systemのようにエフェクト註釈を型につける
          }

          などの方法をとることで “純粋な函数か非純粋な函数か” の区別を型レヴェルでしなければならないようです．
          上記項目に馴染みのない読者は\cite[`WadlerThiemann03`];などを参照するとよいかと思います．
        }
        +p{
          また，〈NJ〉には型推論が（少なくともそのままでは）できないという弱点があり，
          これもできれば克服したいのですが，型推論を実現するように変更を施すにも若干の困難があります．
          スコープの情報をトラックしなければならないのですが，
          ラムダ抽象のコードコンビネータを（導出木で下から上に）走査して新しいスコープを設けるときに，
          つくられるラムダ抽象全体のコードのスコープは一般には推論中なので，
          その場では新しいスコープを決め打ちできず，
          型変数の要領でスコープ変数を導入して制約を生成することになります．
          このとき，型環境中のすべての型に新たにとられたスコープ変数が含まれてはならないという制約を
          表現するのにカインドのような機構が必要になりそうです．
          型推論の途中での “上りがけ” の型環境中ではまだコードの型であると確定していない部分に型変数 ${\alpha} が含まれており，
          この型変数 ${\alpha} はスコープ ${\gamma} をもつ型で（制約解消の結果）置き換えられてはならない，
          という制約を保持する必要があるためです．
        }
      >
    >
    +section{まとめ}<
      +p{
執筆時間の確保不足のためかなり端折ってしまうことになりましたが，本記事では多段階計算の基礎を導入するとともに可変参照と組み合わせたときにどのような問題が生じるかに触れ，それを静的に弾く型システムについて既存研究を紹介しました．既存の型システムについて依然として存在する弱点についても述べ，その大雑把な解決への個人的着想についてごく簡単に触れました．
      }
    >
  >
>
