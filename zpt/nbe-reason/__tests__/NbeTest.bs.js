// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var Nbe$NbeReason = require("../src/Nbe.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var nat = /* Arr */[
  /* Arr */[
    /* Base */0,
    /* Base */0
  ],
  /* Arr */[
    /* Base */0,
    /* Base */0
  ]
];

var one = /* Abs */Block.__(1, [
    "f",
    /* Arr */[
      /* Base */0,
      /* Base */0
    ],
    /* Abs */Block.__(1, [
        "x",
        /* Base */0,
        /* App */Block.__(2, [
            /* Var */Block.__(0, ["f"]),
            /* Var */Block.__(0, ["x"])
          ])
      ])
  ]);

var plus_002 = /* Abs */Block.__(1, [
    "m",
    nat,
    /* Abs */Block.__(1, [
        "f",
        /* Arr */[
          /* Base */0,
          /* Base */0
        ],
        /* Abs */Block.__(1, [
            "x",
            /* Base */0,
            /* App */Block.__(2, [
                /* App */Block.__(2, [
                    /* Var */Block.__(0, ["n"]),
                    /* Var */Block.__(0, ["f"])
                  ]),
                /* App */Block.__(2, [
                    /* App */Block.__(2, [
                        /* Var */Block.__(0, ["n"]),
                        /* Var */Block.__(0, ["bf"])
                      ]),
                    /* Var */Block.__(0, ["x"])
                  ])
              ])
          ])
      ])
  ]);

var plus = /* Abs */Block.__(1, [
    "n",
    nat,
    plus_002
  ]);

var times_002 = /* Abs */Block.__(1, [
    "m",
    nat,
    /* Abs */Block.__(1, [
        "f",
        /* Arr */[
          /* Base */0,
          /* Base */0
        ],
        /* App */Block.__(2, [
            /* Var */Block.__(0, ["n"]),
            /* App */Block.__(2, [
                /* Var */Block.__(0, ["m"]),
                /* Var */Block.__(0, ["f"])
              ])
          ])
      ])
  ]);

var times = /* Abs */Block.__(1, [
    "n",
    nat,
    times_002
  ]);

var Runtime_type_error = Caml_exceptions.create("NbeTest-NbeReason.Runtime_type_error");

var inc1 = /* MAbs */Block.__(1, [(function (sem) {
        if (sem.tag) {
          throw Runtime_type_error;
        } else {
          return /* MNat */Block.__(0, [sem[0] + 1 | 0]);
        }
      })]);

var partial_arg = /* MNat */Block.__(0, [0]);

function testEnv(param) {
  return Nbe$NbeReason.envExt("x", partial_arg, (function (param) {
                return Nbe$NbeReason.envExt("f", inc1, Nbe$NbeReason.envEmpty, param);
              }), param);
}

var two_000 = /* App */Block.__(2, [
    plus,
    one
  ]);

var two = /* App */Block.__(2, [
    two_000,
    one
  ]);

Nbe$NbeReason.evaluate(/* App */Block.__(2, [
        /* App */Block.__(2, [
            two,
            /* Var */Block.__(0, ["f"])
          ]),
        /* Var */Block.__(0, ["x"])
      ]), testEnv);

describe("true", (function () {
        return Jest.test("true is true", (function (param) {
                      return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](true));
                    }));
      }));

var id = /* Abs */Block.__(1, [
    "x",
    /* Base */0,
    /* Var */Block.__(0, ["x"])
  ]);

var zero = /* Abs */Block.__(1, [
    "f",
    /* Arr */[
      /* Base */0,
      /* Base */0
    ],
    /* Abs */Block.__(1, [
        "x",
        /* Base */0,
        /* Var */Block.__(0, ["x"])
      ])
  ]);

exports.id = id;
exports.nat = nat;
exports.zero = zero;
exports.one = one;
exports.plus = plus;
exports.times = times;
exports.Runtime_type_error = Runtime_type_error;
exports.inc1 = inc1;
exports.testEnv = testEnv;
exports.two = two;
/*  Not a pure module */
