LF tp : type =
| base : tp
| arr  : tp → tp → tp
;

--name tp A.
--name tp B.

LF term : tp → type =
| app : term (arr A B) → term A → term B
| lam : (term A → term B) → term (arr A B)
;

schema tctx = some [ t : tp ] block x : term t;

% we use old-style definition because
% we need both `neut` and `norm` at the same time
neut : tp → type.
norm : tp → type.
nlam : (neut a → norm b) → norm (arr a b).
rapp : neut (arr a b) → norm a → neut b.
embed : neut base → norm base.

schema ctx = some [a:tp] block x:neut a;

stratified Sem : {g : ctx} [ ⊢ tp] -> ctype =
    | Base : [g ⊢ norm base] → Sem [g] [ ⊢ base]
    | Arr : {g : ctx} { A : [ ⊢ tp ] } { B : [ |- tp ]}
            ({h : ctx} {#S: [h |- g]} Sem [h] [ ⊢ A ] → Sem [h] [ ⊢ B ]) → Sem [g] [ ⊢ arr A B ]
;

rec sem_wkn : {h : ctx} {g : ctx} {#S : [h ⊢ g]} Sem [g] [ ⊢ A] → Sem [h] [ ⊢ A]  =
mlam h ⇒ mlam g ⇒ mlam S ⇒ fn e ⇒ case e of 
    | Base [g ⊢ R] ⇒ Base [h ⊢ R[#S]]
    | Arr [g] [⊢ A] [⊢ B] f ⇒ Arr [h] [⊢ A] [⊢ B] (mlam h' ⇒ mlam S' ⇒ f [h'] [h' ⊢ #S[#S']])
;
