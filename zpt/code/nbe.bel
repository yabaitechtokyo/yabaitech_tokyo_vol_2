LF tp : type =
| base : tp
| arr  : tp → tp → tp
;

--name tp A.
--name tp B.

LF term : tp → type =
| app : term (arr A B) → term A → term B
| lam : (term A → term B) → term (arr A B)
;

schema tctx = some [ t : tp ] block x : term t;

% we use old-style definition because
% we need both `neut` and `norm` at the same time
neut : tp → type.
norm : tp → type.
nlam : (neut a → norm b) → norm (arr a b).
rapp : neut (arr a b) → norm a → neut b.
embed : neut base → norm base.

schema ctx = some [a:tp] block x:neut a;

stratified Sem : {γ : ctx} [ ⊢ tp] -> ctype =
    | Base : [γ ⊢ norm base] → Sem [γ] [ ⊢ base]
    | Arr : {γ : ctx} { A : [ ⊢ tp ] } { B : [ |- tp ]}
            ({δ : ctx} {#S : [δ |- γ]} Sem [δ] [ ⊢ A ] → Sem [δ] [ ⊢ B ]) → Sem [γ] [ ⊢ arr A B ]
;
