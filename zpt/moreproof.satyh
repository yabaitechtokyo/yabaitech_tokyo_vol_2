@require: gr

module MoreProof : sig

  % direct \derive : [inline-text?; bool?; math list; math] math-cmd
  % direct \derive-dot : [inline-text?; bool?; math list; math] math-cmd
  % direct \derive-noline : [inline-text?; bool?; math list; math] math-cmd

  direct \bderive : [inline-text?; bool?; math; math list] math-cmd

end = struct

  let-math \math-space len =
    text-in-math MathOrd (fun _ -> inline-skip len)


  let length-max len1 len2 =
    if len1 <' len2 then len2 else len1


  let derive nameopt bopt widopt linefunc mlst1 m2 =
    let ib-space =
      match widopt with
      | None    -> inline-skip 30pt
      | Some(_) -> discretionary 100 (inline-skip 30pt) inline-fil inline-fil
    in
    text-in-math MathInner (fun ctx -> (
      let ibacc1 =
        (mlst1 |> List.fold-left-adjacent (fun ibacc1 m prevopt _ -> (
          let ibm = embed-math ctx m in
            match prevopt with
            | None    -> inline-fil ++ ibm
            | Some(_) -> ibacc1 ++ ib-space ++ ibm
        )) inline-nil) ++ inline-fil
      in
      let ib1 =
        match widopt with
        | None      -> ibacc1
        | Some(wid) -> embed-block-bottom ctx wid (fun ctx -> line-break true true ctx ibacc1)
      in
      let ib2 = inline-fil ++ (embed-math ctx m2) ++ inline-fil in
      let thickness = 0.5pt in
      let gap = 2pt in
      let (glnamef, wname) =
        match nameopt with
        | None ->
            ((fun _ -> []), 0pt)

        | Some(name) ->
            let ib = read-inline ctx {\ (#name;)} in
            let (wname, _, _) = get-natural-metrics ib in
            let wname =
              match bopt with
              | None        -> wname
              | Some(false) -> wname
              | Some(true)  -> 0pt
            in
              ((fun pt -> [Gr.text-rightward pt ib]), wname)
      in
      let w =
        match widopt with
        | None      -> length-max (get-natural-width ib1) (get-natural-width ib2)
        | Some(wid) -> length-max wid (get-natural-width ib2)
      in
      let color = get-text-color ctx in
      let bar =
          inline-graphics w (thickness +' gap) gap (fun (x, y) ->
            List.append
              (linefunc color x y w thickness)
              (glnamef (x +' w, y -' (get-axis-height ctx)))
          )
      in
        line-stack-bottom [ib1; bar; ib2]
          ++ inline-skip wname
    ))

  let singleLine color x y w thickness =
    [fill color (Gr.rectangle (x, y) (x +' w, y +' thickness));]

  let dottedLine wdot wspace color x y w thickness =
    let-rec drawDots x w result =
      if (wdot +' wspace) >' w then
        let dot = fill color (Gr.rectangle (x, y) (x +' w, y +' thickness))
        in
        List.reverse (dot :: result)
      else
        let dot = fill color (Gr.rectangle (x, y) (x +' wdot, y +' thickness))
        in
        drawDots (x +' wdot +' wspace) (w -' wdot -' wspace) (dot :: result)
    in
    drawDots x w []

  let noLine color x y w thickness = []

  let-math \derive ?:nameopt ?:bopt mlst m =
    derive nameopt bopt None singleLine mlst m

  let-math \derive-dot ?:nameopt ?:bopt mlst m =
    derive nameopt bopt None (dottedLine 3pt 2pt) mlst m

  let-math \derive-noline ?:nameopt ?:bopt mlst m =
    derive nameopt bopt None noLine mlst m

  let-math \bderive ?:nameopt ?:bopt m mlst =
    derive nameopt bopt None singleLine mlst m

end
