@require: math
@require: color
@import: bib
@import: moreproof
@import: ../main/book-class
@import: ../lib/code

module Zpt : sig
  val article : block-text
end = struct

let-math \base = ${\iota}
let-math \arr ant succ = ${#ant \rightarrow #succ}
let-math \var name = ${#name}
let-math \lam name typ body = ${\lambda #name^{#typ} . #body}
let-math \app fn arg = ${#fn #arg}
let-math \judgeType typ = ${\vdash #typ : Type}
let-math \judgeStlc ctx term typ = ${#ctx \vdash #term : #typ}
let-math \judgeNeut ctx neut typ = ${#ctx \vdash #neut : #typ \in Neut}
let-math \judgeNorm ctx norm typ = ${#ctx \vdash #norm : #typ \in Norm}
let-math \br = ${\rightarrow_{\beta}}
let-math \brm = ${\rightarrow_{\beta}^{*}}
let-math \er = ${\rightarrow_{\eta}}
let-math \erm = ${\rightarrow_{\eta}^{*}}
let-math \subst m x n = ${#m \sqbracket{#x \coloneq #n}}

let-inline ctx \insert-image w path =
  let img = load-image path in
    use-image-by-width img w

let-inline ctx \insert-pdf-image w path page =
  let img = load-pdf-image path page in
    use-image-by-width img w

let-inline ctx \todo inner =
  let ctx-todo =
    ctx |> set-text-color Color.red
  in
    read-inline ctx-todo {[TODO: #inner;]}

let article = '<
  +chapter ?:(`zpt-article`)
  (|
    bibliography = zpt-bibliography;
    title = {Belugaで楽に型システムを形式化する話};
    author = {zeptometer};
    |) <
    +section {はじめに} <
    +p {Beluga\footnote{http://complogic.cs.mcgill
    
    .ca/beluga/}はMcGill大学のBrigitte Pientkaらによって開発されている定理証明支援系というか関数型プログラミング言語というか、なんかそんなかんじのものです\footnote{Curry-Howard同型が理論的背景にあるから境目が曖昧になるんですわ、しゃーない}。公式サイトによる紹介は以下の通りです。}
    +p {\> Beluga is a functional programming language designed for reasoning about formal systems. It features direct support for object-level binding constructs using higher order abstract syntax and treats contexts as first class objects.}
    +p {なんかわかるようなわからないようなことが書いてありますね。これの意味するところがわかるところまで持っていくのがこの記事の目標となっております。がんばるぞー。記事の流れは以下のようになっております:
    \listing{
    * Normalization by Evaluationというテクニックについて解説をしながらReasonで実装し\footnote{Reasonを選んだのはなんとなく触ってみたかったからです!}、その実装の問題点について考える
    * Belugaの言語機能について解説しつつNormalization by Evaluationを再実装し、先の問題点が解消されていることを確認する
    }
    }
    >


    +section {インストール} <
    +p{GithubのREADMEを読め。\todo{真面目に書く必要あるかなこれ}}
    >


    +section {背景の背景: 単純型付きλ計算の正規形} <
    +p{この記事ではNormalization by Evaluationを形式化しますが、その前に前提知識としてChurch流の単純型付きλ計算(Simply Typed Lambda Calculus, STLC)\cite[`Barendregt93`];について説明します。STLCは静的な型システムを持つプログラミング言語のエッセンスを抽出した体系のうち最もシンプルなものの一つです。}

    +p{STLCの\dfn{型}は\dfn{基底型}${\base}と\dfn{関数型}${\arr{A}{B}}からなります。${\judgeType{A}}は「${A}はSTLCの型である」ことを表わします。このように何らかの知識を表す記法をここでは\dfn{判断}と呼びます(便宜上この記事での判断は全て${\vdash}を伴う記法を用います)。STLCの型に関する判断は以下の規則によって導出されます。
    \math-list (${
    | \bderive{ \judgeType{\base} }
              {| |}
    | \bderive{ \judgeType{\arr{A}{B}} }
              {| \judgeType{A}
               | \judgeType{B}
               |}
    |});
    以降STLCの型は暗黙にこれらの導出規則によって導かれたものと考えることにしましょう。}
    +p{一方でSTLCの\dfn{項}は\dfn{変数}${\var{x}}、\dfn{関数}${\lam{x}{A}{M}}、\dfn{関数適用}${\app{M}{N}}からなります。これらはプログラムに相当するものです。
    さて、\dfn{環境}${\Gamma}を変数と型の対の集合とするときに、型判断${\judgeStlc{\Gamma}{M}{A}}を定義できます。これは「環境${\Gamma}の下で項${M}が型${A}を持つ」ことを表す判断で、以下の規則に従って導出されます。

    \math-list (${
    | \bderive?:!{Var}
              { \judgeStlc{\Gamma}{\var{x}}{A} }
              {| x \colon A \in \Gamma |}
    | \bderive?:!{Abs}
              { \judgeStlc{\Gamma}{\lam{x}{A}{M}}{\arr{A}{B}} }
              {| \judgeStlc{\Gamma, x:A}{M}{B} |}
    | \bderive?:!{App}
              { \judgeStlc{\Gamma}{\app{M}{N}}{B} }
              {| \judgeStlc{\Gamma}{M}{\arr{A}{B}}
               | \judgeStlc{\Gamma}{N}{A}
               |}
    |});
    }
    +p{λ計算で重要な概念としてβ簡約があります。これは関数適用を実行することでプログラムが進んでいく過程を抽象化した概念です。項の集合を${Term}をするとき、β簡約${\br}は${Term}上の二項関係で以下のような性質を満たすものと定義します。
    \align [
    ${| \app{\paren{\lam{x}{A}{M}}}{N} | \br \subst{M}{x}{N} | |};
    ${| \lam{x}{A}{M} | \br \lam{x}{A}{N} | \text!{if\ } M \br N |};
    ${| \app{M}{L} | \br \app{N}{L} | \text!{if\ } M \br N |};
    ${| \app{L}{M} | \br \app{L}{N} | \text!{if\ } M \br N |};
    ];
    また、二項関係${\brm}を${\br}の反射推移閉包としましょう。上の定義で${\subst{M}{x}{N}}は「項M中における変数xの使用を項Nに置き換えて得られる項」を表していますが、厳密な定義は実は結構面倒くさいのでここでは省略します。一つ目のルールが実際に関数適用を実行している部分で、他は部分項が実行されている場合のルールです。さて、STLCに関する重要な性質の一つとして、STLCで導出可能な項がβ簡約に関して以下に定義する\dfn{合流性}と\dfn{強正規化性}を満たすということが知られています。}
    +definition{項${M}がβ正規形である ${\Leftrightarrow} ${M \br N}を満たす項${N}が存在しない}
    +definition{
    ${\br}が\dfn{合流性}を満たす ${\Leftrightarrow} ${M \brm N_1}かつ${M \brm N_2}ならば${N_1 \brm L}かつ${N_2 \brm L}であるような${L}が存在する
    }
    +definition{
    ${\br}が\dfn{強正規化性}を満たす ${\Leftrightarrow} 無限簡約列 ${M_1 \br M_2 \br \ldots}が存在しない
    β簡約の合流性と強正規化性の帰結として、「STLC上で導出可能な任意の項\footnote{厳密には「STLCの導出規則によって導出された型判断を伴う項」ですかね}はβ正規形をただ一つもつ」ということが言えます。}
    +p{もう一つ重要な概念として\dfn{η正規形}があります。ふんわりとした説明になってしまいますが、これは「関数型を持つ項はλ項の形をしていてほしい」という気持ちに基いた概念です。これは形式的は\dfn{η展開}よって記述されますが、素朴なη展開${\er}は以下のような二項関係として定義できます。
    \align [
    ${| M | \er \lam{x}{A}{\app{M}{x}} || \text!{when ${M} has type ${\arr{A}{B}}} |};
    ${| \lam{x}{A}{M} | \er \lam{x}{A}{N} || \text!{if\ } M \br N |};
    ${| \app{M}{L} | \er \app{N}{L} || \text!{if\ } M \br N |};
    ${| \app{L}{M} | \er \app{L}{N} || \text!{if\ } M \br N |};
    ];
    一つ目のルールで関数型を持つ項をλ項の形に展開しており、先ほど述べた気持ちを表しています。ここでわざわざ「素朴な」η展開と言ったのは、この定義だと強正規化性が満たされなくなってしまうためです。例えば以下のような自明な無限展開列が存在します。
    \math-list(${| M \er \lam{x}{A}{\app{M}{x}} \er \lam{x}{A}{\app{\paren{\lam{x}{A}{\app{M}{x}}}}{x}} \er \cdots |});
    この例の場合、二つ目の項で欲しいものは得られているためここでη展開を止めるように定義を制限してやる必要があります。若干ややこしい話になってしまうためここでは詳しく述べませんが\footnote{wasabizの記事で言及があります。興味のある方はそちらを参照してください。}、うまく制限したη展開はβ簡約と同様の合流性と強正規化性を満たすことが知られています\cite[`JG95`];。
    }
    +p{ある項がβ正規形かつη正規形である時、その項は\dfn{βη正規形}と呼ばれます。STLCにおける任意のβη正規形の項は以下の導出規則によって導かれることが知られています。
      \math-list (${
      | \bderive?:!{NVar}
              { \judgeNeut{\Gamma}{x}{A} }
              {| x:A \in \Gamma |}
      | \bderive?:!{NLam}
              { \judgeNorm{\Gamma}{\lam{x}{A}{M}}{\arr{A}{B}} }
              {| \judgeNorm{\Gamma, x\colon A}{M}{B} |}
      | \bderive?:!{Embed}
              { \judgeNorm{\Gamma}{R}{\base} }
              {| \judgeNeut{\Gamma}{R}{\base} |}
      | \bderive?:!{RApp}
              { \judgeNeut{\Gamma}{\app{R}{M}}{B}}
              {| \judgeNeut{\Gamma}{R}{\arr{A}{B}}
               | \judgeNorm{\Gamma}{M}{A}
               |}
      | 
      |});
      この導出規則においては中立項${Neut}と正規項${Norm}を相互再帰的に定義しています。この結果として得られる${Norm}がβη正規形の項の集合になります。この定義がβ簡約とη展開の定義に基く正規形と一致していることは当然自明ではないので証明が必要ですが、とりあえずここではそういうものだと思ってください。\todo{cite}
    }
    +p{さて、これまでの話をふまえるとSTLCの項が与えられた時にそれに対応するβη正規形の項を得たい、というのはごく自然な考えであると思われます。
    \listing {
    * プログラム
    ** 入力: STLCの項
    ** 出力: 入力の項に対応するβη正規形
    ** 実装: ??
    }
    この問題に対する実装方針としてまず最初に思いつくのは「正規形を得るまで項にβ簡約とη展開を繰り返し適用する」という素朴なアルゴリズムでしょう。しかしながらこれにはいくつか困難な点が存在します。}
    +p{一つ目の問題点は変数束縛の管理です。例えば以下のような型判断を考えてみましょう。
    \math-list(${| \judgeStlc{y \colon \arr{A}{B}}{\app{\paren{\lam{x}{\arr{A}{B}}{\lam{y}{A}{\app{\var{x}}{\var{y}}}}}}{y}}{\arr{A}{B}} |});
    定義によるとこの項は以下のようにβ簡約できます。
    \math-list(${| \app{\paren{\lam{x}{\arr{A}{B}}{\lam{y}{A}{\app{\var{x}}{\var{y}}}}}}{y} \br \subst{\paren{\lam{y}{A}{\app{\var{x}}{\var{y}}}}}{x}{y} |});
    ここで${\subst{M}{x}{N}}は\math(${});${M}中の${x}を${N}に置き換えた項だったわけですが、${\subst{\paren{\lam{y}{A}{\app{\var{x}}{\var{y}}}}}{x}{y}}の場合、λ抽象によって導入された${y}と${x}を置き換えた後に入る${y}で変数名が衝突してしまいます。
    \align[${| \subst{\paren{\lam{y}{A}{\app{\var{x}}{\var{y}}}}}{x}{y} | \neq \lam{y}{A}{\app{\var{y}}{\var{y}}}| \text!{// ダメ!}|}];
    こういった事態は\dfn{意図しない変数補足}と呼ばれたりします。こういった事態を避けるために、変数名の衝突が起きる場合にはλ抽象の束縛変数を衝突しないものに置き換える必要がでてきます。
    \align[
    ${| \subst{\paren{\lam{y}{A}{\app{\var{x}}{\var{y}}}}}{x}{y} | = \subst{\paren{\lam{z}{A}{\app{\var{x}}{\var{z}}}}}{x}{y} || \text!{// 束縛変数のyをzに置き換えると} |};
    ${| | = \lam{z}{A}{\app{\var{y}}{\var{z}}} || \text!{// オーケー} |}
    ];
    このようにちゃんとした置換を実装するためには意図しない変数補足が起きないように確認しつつ必要であれば束縛変数の名前を書き換えていく必要があるわけです\footnote{この束縛変数の名前の書き換えのことを\dfn{α変換}と呼びます。詳細は\cite[`Barendregt93`];をご参照ください。}。これをきちんと実装するのがなかなか面倒です。β簡約に関してあまり本質的でない部分に実装を割かないといけないのはあまりよろしくありません。
    }
    +p{もう一つの問題点はη展開を適切に定義するのが面倒くさいという点です。η展開の説明でも述べたように、素朴な規則を用いると無限展開列が生じいつまで立っても正規形を得ることができません。それを防ぐためにη展開の規則を制限してやる必要がありますが、これはこの記事にわざわざ書くのが面倒くさい程度には複雑です。そういった性質のものをきちんと定義に基いてプログラムに書き起こす作業がいかに大変かは想像していただける通りと思われます。}
    +p{このようにβ簡約、η展開の定義に基いて正規形を得るという方針は素直に見えて実は様々な困難があり、あまり実装したいものではありません。}
    >


    +section {背景: Normalization by Evaluation / 評価による正規化} <
      +p{このような前置きをしたからには簡約を用いた正規化以外にもλ項の正規形を得る方法はあるわけです。それがこれから紹介する\dfn{Normalization by Evaluation}(NbE, 評価による正規化)\cite[`Lindley05`];です。基本的なアイデアは名前の通りで、\emph{λ項に対するeval関数を用いて正規形を得る}というものです。}
      +p{一般的にeval(評価)関数とはプログラムのコードを受け取ってそれを実行した結果を返す関数のことです\footnote{RubyやPython、Javascriptなどのインタープリタを前提とした言語がサポートしていることが多い印象があります。あとCommon LispとかSchemeとかClojureとか。}。もう少し抽象的な解釈として、ここではeval関数を「λ項の集合からそれに対応する\dfn{意味}\footnote{要はsemanticsのことです。}の集合への関数」と考えることにしましょう。以降λ項の集合を${Term}、意味の集合を${Sem}と呼ぶことにします。
      \math-list(${| eval: Term \rightarrow Sem |});
      eval関数に対する妥当な仮定として以下のものを考えます。

      \hypothesis{${M}と${N}が同じ正規形を持つなら${eval\paren{M} = eval\paren{N}}である。}

      \hypothesis{${M}と${N}が同じ正規形を持たないなら${eval\paren{M} \neq eval\paren{N}}である。}

      これらの仮定が成り立つ時、\emph{同じ正規形を持つ項はその場合に限って同じ意味を持つ}ということが言えるはずです。とすると、ある意味${s}が与えられた時に${eval\paren{M} = s}となるようなMのうちただ一つの正規形を選んでくることができるはずです。これを実現する関数をNbEの文脈では\dfn{reify}(具象化)と呼んでいます。以降、正規形からなる集合を${Norm}と呼びましょう。reifyの型は以下のようになるはずです。

      \math-list(${| reify: Sem \rightarrow Norm |});

      そうすると後は簡単で、このevalとreifyを組み合わせることで項の正規形を得る関数を定義できます。

      \math-list(${| normalize = reify \circ eval: Term \rightarrow Norm |});
      
      \figure ?:(`fig:nbe_in_one_pic`)
      {NbEの基本的なアイデア(\cite[`Lindley16`];より引用)}
      <+image-frame{\insert-image(14cm)(`../zpt/figure/nbe.jpg`);}>
      
      これがNbEの基本的なアイデアです(\cite[`Lindley16`];にこれを端的に表した図があったので\ref-figure(`fig:nbe_in_one_pic`);として引用しておきます)。}

      +p{NbEのキモの部分はreify関数を如何に実装するかという点にあります。これを実際にReasonでNbEを実装しながら見ていくことにしましょう。\footnote{Reasonを選んだのは代数的データ型をサポートした静的型付け言語で綺麗なコードが書けそうだったからで特に深い意味はないです:)}。最初にすることはSTLCの型と項をReasonのデータ型として定義することです。
    \Code.d-code(`
type typ =
  | Base
  | Arr(typ, typ);

type term =
  | Var(string)
  | Abs(string, typ, term)
  | App(term, term);
    `);
    変数名はstringで表すことにしています。termは型判断とは独立して定義されているので導出できない項も表現できてしまいますが、今のところは妥当な型判断を伴う項だけを考えることにしましょう。}
    
    +p{次に${Sem}に対応するものとして\Code.code(`semantics`);という型を定義します。
    \Code.d-code(`
type semantics =
  | MBase(term)
  | MAbs(semantics => semantics);
    `);

    基底型の項に対応する意味が\Code.code(`MBase`);で、これは正規形の項をそのまま持ちます。型に\Code.code(`term`);を使っているのはReasonの型システムでは正規形を表現できないためです。また、関数型の項に対応する意味が\Code.code(`MAbs`);で、これは意味から意味への関数から成ります。}
    +p{STLCの項を評価するためには評価される項の他に自由変数に対応する意味を持つ\dfn{環境}が必要です。これを\Code.code(`env`);という型として定義しましょう。これは変数名を与えた時に対応する\Code.code(`semantics`);を返す関数として実装できます。空の環境\Code.code(`envEmpty`);は必ず\Code.code(`Undefined_variable`);を例外として投げます。また\Code.code(`envExt`);は変数名と\Code.code(`semantics`);のペアを受け取って既存の環境を拡張します。
   \Code.d-code(`
type env = string => semantics;

type exn +=
  | Undefined_variable;

let envEmpty: env = _ => raise(Undefined_variable);

let envExt: (string, semantics, env) => env =
  (name, sem, env) => (name2) =>
    if (name === name2) {
      sem;
    } else {
      env(name2);
    };

let envEmpty: env = _ => raise(Undefined_variable);

let envExt: (string, semantics, env) => env =
  (name, sem, env) => (name2) =>
    if (name === name2) {
      sem;
    } else {
      env(name2);
    };
    `);
    然る後に\Code.code(`eval`);の本体を書くことができます。項の構造に関する再帰を用いて素直に実装できます。変数の場合は環境から変数名に対応する意味を返す。λ抽象の場合は意味を受け取ってそれを環境に追加した上でλ抽象の本体を評価する関数を返す。適用の場合はそれぞれを評価した上で一つ目の意味が\Code.code(`MAbs`);になっているはずなのでこの関数に二つ目の意味を渡す。
    \Code.d-code(`
type exn +=
  | Wrong_application;

let rec eval: (term, environment) => semantics =
  (tm, env) => {
    switch (tm) {
    | Var(name) => env(name)
    | Abs(name, _, n) => MAbs(sem => evaluate(n, envExt(name, sem, env)))
    | App(n1, n2) =>
      let sem1 = evaluate(n1, env);
      let sem2 = evaluate(n2, env);

      switch (sem1) {
      | MAbs(f) => f(sem2)
      | MNat(_) => raise(Wrong_application)
      };
    };
  };
    `);
    というわけですんなりと\Code.code(`eval`);を実装することができました。いいですね。人生もこうすんなりといってほしいものです。}
    +p{最後に本題のreify関数を実装します。まず補助関数として新しい変数名を生成する関数を定義しておきます。
    \Code.d-code(`
let varCount = ref(0)
let gensym: unit => string =
  () => {
    let num = varCount^;
    varCount := num + 1;
    "x" ++ Js.Int.toString(num)
  }
    `);
    reify本体は以下のように定義できます。
    \Code.d-code(`
type exn +=
  | Illegal_type;

let rec reify: (semantics, typ) => term =
  (sem) => (ty) => {
    switch (sem) {
    | MBase(tm) => tm
    | MAbs(fn) => 
      switch (ty) {
      | Base => raise(Illegal_type)
      | Arr(ty1, ty2) =>
        let x = gensym();
        Abs(x, ty1, reify(fn(reflect(Var(x), ty1)), ty2))
      }
    }
  }
and reflect: (term, typ) => semantics =
  (tm, ty) => {
    switch(ty) {
    | Base => MBase(tm)
    | Arr(ty1, ty2) =>
      MAbs((sem) => reflect(App(tm, reify(sem, ty1)), ty2))
    }
  }
    `);
    \todo{何が起こっているかを説明する}
    }
    +p{以上がReasonによるNbEの実装です。\todo{SKIコンビネータとかで簡単な例を示す}}
    >
    +section {BelugaによるNormalization by Evaluationの定式化} <
      +p{さて、先ほどの実装にはいくつか問題点があります。\footnote{Reasonの型システムでもこれらの問題点をある程度解決することは可能です。Belugaがどのような問題を解決したいかを説明するためあえて改善の余地のある実装にしています、ご了承ください。}
      \listing{
        * 束縛の管理に本質的でないコードが必要
        * 項が型判断を伴わない場合がある
        * 正規形の項の型がない
        * 上記の要因によって実行時エラーが発生しうる
      }
      \todo{もうちょっと詳しくかきたいよね}
      を指すのですが、この章ではこれらがどういうものかを実際にコードを書いていきながら解説します。
      }
      
      +subsection {Belugaの概要} <
        +p{
          冒頭でも説明したように、BelugaはMcGill大のBrigitte Pientkaらによって開発されている定理証明支援系あるいはプログラミング言語です。定理証明支援系というとCoqやAgda,Isabelleなどが有名ですが、Belugaがそれらと異なるのは「プログラミング言語\footnote{もう少し抽象的に言うと「束縛構造を持つような構造」一般のことを指しますが、プログラミング言語はこれに含まれると考えて差し支えないでしょう。}の形式化とその性質の証明」に特化している点です。
        }
        +p{
          Belugaでは「プログラミング言語を形式化する部分」と「形式化されたプログラミング言語についての性質を記述する部分を」異なるレイヤに分離しています。
          前者のレイヤは\dfn{LF}と呼ばれる言語によって記述され、一方で後者のレイヤはLFに対する\emph{メタプログラミング}として記述されます(\ref-figure(`fig:overview_twolayer`);)。これらの概念がどういうものかを実際にコードを書きながら示すことがこの章の目標です。
          \figure ?:(`fig:overview_twolayer`) {Belugaの二つのレイヤ} <
            +image-frame{
              \insert-pdf-image(14cm)(`../zpt/figure/overview_twolayer.pdf`)(1);
            }
          >
        }        
      >
      +subsection {LFによるSTLCの形式化} <
        +p{
          NbEをBelugaで記述する上で最初にすることはSTLCの形式化です。Belugaではこれを\dfn{LF}\cite[`Harper93`; `Pfenning02`];によって実現します。LFは依存型理論をベースとした言語で、論理体系やプログラミング言語を形式化するのに用いられます。この章では実際にコードを書きながらLFのエッセンスを理解していくことにしましょう。
        }
        +p{まずは型の定義をしましょう。STLCの型は基底型と関数型から成るのでした。型に関する判断をLFにエンコードすると、以下のようなコードになります。
      \Code.d-code(`
LF tp : type =
| base : tp
| arr  : tp → tp → tp
;
  `);
      このコードでは3つの新しい定数\Code.code(`tp`);, \Code.code(`base`);, \Code.code(`arr`);を定義しています。\Code.code(`LF`);は新しいLF定数を定義するためのキーワードです。まず最初の行で\Code.code(`tp`);というSTLCの型を表す型を定義しています。その後に\Code.code(`tp`);に関係する定数として\Code.code(`base`);と\Code.code(`arr`);を定義します。これらはそれぞれSTLCの基底型と関数型に対応します。\Code.code(`arr`);の型は\Code.code(`tp → tp → tp`);となっていますが、これは関数型に関する導出規則が判断を二つとって判断を一つ返すことに対応しています。例えば${\arr{A}{B}}が\Code.code(`arr A B`);に対応するわけです。なお、\Code.code(`LF`);で定義する定数名は\emph{全て小文字である必要があります}。これはBelugaが多くの種類の変数を扱っているが故の制限です。ちなみに\Code.code(`LF`);は糖衣構文で、以下のように1行ずつLF定数の定義を行うこともできます。
            \Code.d-code(`
tp   : type.
base : tp.
arr  : tp → tp → tp.
  `);}
      +p{次にSTLCの項を定義します。LFは依存型に基くため、「STLCにおいて正しい型判断を伴う項」を表現することが可能です。見てみましょう、定義はたったの4行です。
      \Code.d-code(`
LF term : tp → type =
| app : term (arr a b) → term a → term b
| lam : (term a → term b) → term (arr a b)
;
      `);
      1行目で\Code.code(`term`);という型を定義しています。これは\Code.code(`tp`);の項を一つとります。たとえば\Code.code(`tp`);の型を持つ項\Code.code(`A`);があったときに、\Code.code(`term A`);で「STLCにおいてAという型を持つλ項」を表します。このように型の中に項の出現を許すのが依存型の特色です。\Code.code(`app`);は関数適用の項に対応する定数で、型\Code.code(`arr a b`);の項と型\Code.code(`a`);の項から型\Code.code(`b`);の項をつくります。以下のSTLCの導出規則に素直に対応していることがわかります。
      \math-list (${
      | \bderive?:!{App}
              { \judgeStlc{\Gamma}{\app{M}{N}}{B} }
              {| \judgeStlc{\Gamma}{M}{\arr{A}{B}}
               | \judgeStlc{\Gamma}{N}{A}
               |}
      |});
      ところで上の定義の中に変数に対応するものがないことに気付かれたかもしれません。LFでは\emph{エンコードする対象の言語の変数をLFの変数で直接表わします}。例えばSTLCの項とそのLFにおけるエンコードは以下のようになります。
      \align [
        ${|| \text!{STLCの項}  || \text!{LFによる表現} |};
        ${|| \var{x} || \text!{\Code.code(`x`);} |};
        ${|| \app{\var{x}}{\var{y}} || \text!{\Code.code(`app x y`);} |};
      ];
      関数の項に対応する定数\Code.code(`lam`);はこのアイデアの延長線上にあります。(Abs)の規則を思い出してみましょう。
      \math-list (${
        | \bderive?:!{Abs}
            { \judgeStlc{\Gamma}{\lam{x}{A}{M}}{\arr{A}{B}} }
            {| \judgeStlc{\Gamma, x:A}{M}{B} |}
      |});
      環境の中に型${A}の変数${x}がある時にそれを項の方へ持っていってλ抽象にすることができるというルールです。先ほどのLFの変数でSTLCの変数を表すというアイデアに基づくと、前者の状況は\Code.code(`term a → term b`);の型を持つLF項で表せるはずです。この項から\Code.code(`term \arr{a}{b}`);のLF項をつくるのが\Code.code(`lam`);の役割で、これは丁度(Abs)の規則に一致します。\Code.code(`lam`);を使うと以下のようにエンコードができます。
      \align [
        ${|| \text!{STLCの項}  || \text!{LFによる表現} |};
        ${|| \lam{x}{A}{\var{x}} || \text!{\Code.code(`lam (\x.x)`);} |};
        ${|| \lam{x}{\arr{A}{B}}{\lam{y}{A}{\app{\var{x}}{\var{y}}}} || \text!{\Code.code(`lam (\x. (lam \y. (app x y)))`);} |};
      ];
      このようにエンコードの対象の言語(ここではSTLC)の変数をエンコードする言語(ここではLF)の変数で表わすテクニックを\dfn{Higher Order Abstract Syntax}(HOAS)と呼びます。変数名を文字列で管理する方法に比べて、HOASは変数の取り扱いの面倒な部分をエンコードする言語に任せることができ実装が大幅に楽になる利点があります。
      }
      +p{依存型は大変強力なので、STLCのβη正規形を表現することも可能です。以前に定義したβη正規形の導出規則をBelugaのコードに落としこむと以下のようになります。
      \Code.d-code(`
neut  : tp → type.
norm  : tp → type.

nlam  : (neut a → norm b) → norm (arr a b).
rapp  : neut (arr a b) → norm a → neut b.
embed : neut base → norm base.
      `);
      正規形の定義は${Neut}と${Norm}の相互再帰的なっているため\Code.code(`LF`);文では定義できません。変わりに一行ずつ新しいLF定数を定義しています。
      }
      >
      +subsection {計算の階層からNormalization by Evaluationを定義する} <
        +p{先ほどLFで定義したSTLCの項と正規項を用いてNormalization by Evaluationを実装していきましょう。ただここで問題がでてきます。例えばCoqであればSTLCの項を代数的データ構造として定義して、それに対するプログラムないし証明を書くことでSTLCの性質を書くことができます。しかしながら今回我々がSTLCを表現するために定義したLF定数はあくまでただの定数でパターンマッチができるようなデータ構造ではありません。
        これらを解決するためにBelugaではメタプログラミングの階層を提供して、そこから\emph{LFのコードをオブジェクトとして扱って}、それに対して計算することができるようになっています。Belugaではこれを\dfn{計算の階層}と呼んでいます。}
        +p{
          \Code.d-code(`
schema ctx = some [a:tp] block x:neut a;

stratified Sem : {g : ctx} [ ⊢ tp] -> ctype =
| Base : [g ⊢ norm base] → Sem [g] [ ⊢ base]
| Arr : {g : ctx} ({h : ctx} {#S: [h ⊢ g]} Sem [h] [ ⊢ A] → Sem [h] [ ⊢ B])
                  → Sem [g] [ ⊢ arr A B]
;

rec sem_wkn : {h : ctx} {g : ctx} {#S : [h ⊢ g]} Sem [g] [ ⊢ A] → Sem [h] [ ⊢ A]  =
  mlam h ⇒ mlam g ⇒ mlam S ⇒ fn e ⇒ case e of 
  | Base [g ⊢ R] ⇒ Base [h ⊢ R[#S]]
  | Arr [g] f ⇒ Arr [h] (mlam h' ⇒ mlam S' ⇒ f [h'] [h' ⊢ #S[#S']])
;
          `);
        }

        +p{\Code.d-code(`
schema tctx = some [t : tp] block x : term t;

typedef Env : {g : tctx} {h : ctx} ctype =
  {T : [ ⊢ tp]} {#p : [g ⊢ term T[]]} Sem [h] [ ⊢ T]
;

rec env_ext : Env [g] [h] → Sem [h] [ ⊢ S] → Env [g, x : term S[]] [h]  =
  fn env ⇒ let env : Env [g] [h] = env
    in fn sem ⇒ mlam T ⇒ mlam p ⇒ case [g, x : term _ ⊢ #p] of 
       | [ g, x : term S ⊢ x ] ⇒ sem
       | [ g, x : term S ⊢ #q[..] ] ⇒ env [ ⊢ T ] [ g ⊢ #q ]
;

rec env_wkn : {h' : ctx} {h : ctx} {#W : [h' ⊢ h]} Env [g] [h] → Env [g] [h']  =
mlam h' ⇒ mlam h ⇒ mlam W ⇒ fn env ⇒ 
  let env : Env [g] [h] = env
  in mlam T ⇒ mlam p ⇒ sem_wkn [h'] [h] [h' ⊢ #W] (env [ ⊢ T] [g ⊢ #p])
;

rec eval : [g ⊢ term S[]] → Env [g] [h] → Sem [h] [ ⊢ S]  =
fn tm ⇒ fn env ⇒
  let env : Env [g] [h] = env
  in case tm of
     | [g ⊢ #p] ⇒ env [ ⊢ _] [g ⊢ #p]
     | [g ⊢ lam (\x. E)] ⇒
       Arr [h] (mlam h' ⇒ mlam W ⇒ fn sem ⇒
                  let extEnv = (env_ext (env_wkn [h'] [h] [h' ⊢ #W] env) sem)
                  in eval [g, x : term _ ⊢ E] extEnv)
     | [g ⊢ app E1 E2] ⇒ let Arr [h] f = eval [g ⊢ E1] env
                           in f [h] [h ⊢ ..] (eval [g ⊢ E2] env)
;
      `);
      }

      +Code.code(`
mlam R ⇒ fn n ⇒ let [g ⊢ N] = n in [g ⊢ rapp R N];

rec reify : Sem [h] [ ⊢ A] → [h ⊢ norm A[]] =
fn sem ⇒ case sem of
| Base [h ⊢ R] ⇒ [h ⊢ R]
| Arr [g] f ⇒ let  [g, x : neut _ ⊢ N] =
                   reify (f [g, x : neut _] [g, x ⊢ ..] (reflect [g, x : neut _ ⊢ x]))
                   in [g ⊢ nlam (\x. N)]
and reflect : [h ⊢ neut A[]] → Sem [h] [ ⊢ A] =
fn n ⇒ let [h ⊢ R] : [h ⊢ neut A[]] = n
        in case [ ⊢ A] of
            | [ ⊢ base ] ⇒ Base [h ⊢ embed R]
            | [ ⊢ arr B C ] ⇒ Arr [h] (mlam h' ⇒ mlam W ⇒ fn tm ⇒
                                           reflect (app' [h' ⊢ R[#W]] (reify tm)))
;

rec nbe : Env [g] [h] → [g ⊢ term A[]] → [h ⊢ norm A[]] =
fn env ⇒ fn tm ⇒ reify (eval tm env)
;
        `);
      >
    >
    +section {理論的背景について} <
    >
    +section {補遺} <
    >
  >
>
end
