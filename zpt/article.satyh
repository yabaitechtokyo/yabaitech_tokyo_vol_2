@require: math
@require: color
@import: bib
@import: moreproof
@import: ../main/book-class
@import: ../lib/code

module Zpt : sig
  val article : block-text
end = struct

let-math \base = ${\iota}
let-math \arr ant succ = ${#ant \rightarrow #succ}
let-math \var name = ${#name}
let-math \lam name typ body = ${\lambda #name^{#typ} . #body}
let-math \app fn arg = ${#fn #arg}
let-math \judgeStlc ctx term typ = ${#ctx \vdash #term : #typ}
let-math \br = ${\rightarrow_{\beta}}
let-math \brm = ${\rightarrow_{\beta}^{*}}
let-math \subst m x n = ${#m \sqbracket{#x \coloneq #n}}

let-inline ctx \todo inner =
  let ctx-todo =
    ctx |> set-text-color Color.red
  in
    read-inline ctx-todo {[TODO: #inner;]}

let article = '<
  +chapter ?:(`zpt-article`)
  ?:({LFと文脈様相型によるNormalization by Evaluationの定式化})
   (|
    bibliography = zpt-bibliography;
    title = {Belugaによるメタプログラミング};
    author = {zeptometer};
    |) <
    +section {はじめに} <
    +p {Beluga\footnote{http://complogic.cs.mcgill
    
    .ca/beluga/}はMcGill大学のBrigitte Pientkaらによって開発されている定理証明支援系というか関数型プログラミング言語というか、なんかそんなかんじのものです\footnote{Curry-Howard同型が理論的背景にあるから境目が曖昧になるんですわ、しゃーない}。公式サイトによる紹介は以下の通りです。}
    +p {\> Beluga is a functional programming language designed for reasoning about formal systems. It features direct support for object-level binding constructs using higher order abstract syntax and treats contexts as first class objects.}
    +p {なんかわかるようなわからないようなことが書いてありますね。これの意味するところがわかるところまで持っていくのがこの記事の目標となっております。がんばるぞー。記事の流れは以下のようになっております:
    \listing{
    * Normalization by Evaluationというテクニックについて解説をしながらReasonで実装し\footnote{Reasonを選んだのはなんとなく触ってみたかったからです!}、その実装の問題点について考える
    * Belugaの言語機能について解説しつつNormalization by Evaluationを再実装し、先の問題点が解消されていることを確認する
    }
    }
    >
    +section {インストール} <
    +p{GithubのREADMEを読め。\todo{真面目に書く必要あるかなこれ}}
    >
    +section {背景の背景: λ計算の正規形と簡約による正規化} <
    +p{本題に入る前にいくらか背景知識の説明をしておく必要があります。}
    +p{\todo{構成が変わったので序文を書き直す}\dfn{Normalization by Evaluation}とは、λ計算やその亜種の項が与えられた時にその表示的意味論(あるいはeval関数)を経由して正規形を得るテクニックです。今回は対象として単純型付きλ計算(Simply Typed Lambda Calculus, STLC)を扱います\footnote{厳密にはChurch-styleです}。STLCの型は\dfn{基底型}${\base}と\dfn{関数型}${\arr{A}{B}}からなります。
    \math-list(${| A, B \coloncoloneq \base \mid \arr{A}{B} |});

    STLCの項は\dfn{変数}${\var{x}}、\dfn{関数}${\lam{x}{A}{M}}、\dfn{関数適用}${\app{M}{N}}からなります。
    \math-list(${| M, N \coloncoloneq \var{x} \mid \lam{x}{A}{M} \mid \app{M}{N} |});

    \dfn{環境}${\Gamma}を変数と型のペアの集合とするときに、\dfn{型判断}${\judgeStlc{\Gamma}{M}{A}}は「環境${\Gamma}の下で項${M}が型${A}を持つ」ことを表します。型判断は以下の規則に従って導出されます。

    \math-list (${
    | \bderive?:!{Var}
              { \judgeStlc{\Gamma}{\var{x}}{A} }
              {| x \colon A \in \Gamma |}
    | \bderive?:!{Abs}
              { \judgeStlc{\Gamma}{\lam{x}{A}{M}}{\arr{A}{B}} }
              {| \judgeStlc{\Gamma, x:A}{M}{B} |}
    | \bderive?:!{App}
              { \judgeStlc{\Gamma}{\app{M}{N}}{B} }
              {| \judgeStlc{\Gamma}{M}{\arr{A}{B}}
               | \judgeStlc{\Gamma}{N}{A}
               |}
    |});
    
    さて、これをReasonのコードで表してみましょう。STLCの型と項は以下のような代数的データ構造として定義可能です。
    }
    +Code.code(`
type typ =
  | Base
  | Arr(typ, typ);

type term =
  | Var(string)
  | Abs(string, typ, term)
  | App(term, term);
    `);
    +p{変数名はstringで表すことにしています。termは型判断とは独立して定義されているので導出できない項も表現できてしまいますが、今のところは妥当な型判断を伴う項だけを考えることにしましょう。}
    +p{さて、λ計算で重要な概念としてβ簡約があります。項の集合を${Term}をするとき、${\br}は${Term}上の二項関係で以下のような性質を満たすものと定義します。
    \align [
    ${| \app{\paren{\lam{x}{A}{M}}}{N} | \br \subst{M}{x}{N} | |};
    ${| \lam{x}{A}{M} | \br \lam{x}{A}{N} | \text!{if\ } M \br N |};
    ${| \app{M}{L} | \br \app{N}{L} | \text!{if\ } M \br N |};
    ${| \app{L}{M} | \br \app{L}{N} | \text!{if\ } M \br N |};
    ];
    ここで${\subst{M}{x}{N}}は「項M中における変数xの使用を項Nに置き換えて得られる項」を表しています。厳密な定義は実は結構面倒くさいのでここでは省略します。\todo{η正規形についてもちゃんと説明したい}}
    +p{さて、STLCに関する重要な性質として今しがた定義したβ簡約の合流性と強正規化性があります。以降において二項関係${\brm}は${\br}の反射推移閉包とします。}
    +definition{項${M}が正規形である ${\Leftrightarrow} ${M \br N}を満たす項${N}が存在しない}
    +definition{
    ${\br}が\dfn{合流性}を満たす ${\Leftrightarrow} ${M \brm N_1}かつ${M \brm N_2}ならば${N_1 \brm L}かつ${N_2 \brm L}であるようなLが存在する
    }
    +definition{
    ${\br}が\dfn{強正規化性}を満たす ${\Leftrightarrow} 無限簡約列 ${M_1 \br M_2 \br \ldots}が存在しない
    }
    +p{合流性と強正規化性の帰結として、「STLC上で導出可能な項\footnote{厳密には「STLCの導出規則によって導出された型判断を伴う項」ですかね}は対応する正規形をただ一つもつ」ということが言えます。そうであればある項の正規形を得るプログラムを書きたいというのはごく自然な考えですね。
    \listing {
    * プログラム
    ** 入力: STLCの項
    ** 出力: 入力の項に対応する正規形
    ** 実装: ??
    }}
    +p{定義に対応する素朴な実装方針として「正規形を得るまで項にβ簡約を繰り返し適用する」というものが考えられます。でも実はこれが結構面倒くさいんです。
    面倒くささの一つは変数束縛の管理です。例えば以下のような型判断を考えてみましょう。
    \math-list(${| \judgeStlc{y \colon \arr{A}{B}}{\app{\paren{\lam{x}{\arr{A}{B}}{\lam{y}{A}{\app{\var{x}}{\var{y}}}}}}{y}}{\arr{A}{B}} |});
    定義によるとこの項は以下のようにβ簡約できます。
    \math-list(${| \app{\paren{\lam{x}{\arr{A}{B}}{\lam{y}{A}{\app{\var{x}}{\var{y}}}}}}{y} \br \subst{\paren{\lam{y}{A}{\app{\var{x}}{\var{y}}}}}{x}{y} |});
    ここで${\subst{M}{x}{N}}は\math(${});${M}中の${x}を${N}に置き換えた項だったわけですが、${\subst{\paren{\lam{y}{A}{\app{\var{x}}{\var{y}}}}}{x}{y}}の場合、λ抽象によって導入された${y}と${x}を置き換えた後に入る${y}で変数名が衝突してしまいます。
    \align[${| \subst{\paren{\lam{y}{A}{\app{\var{x}}{\var{y}}}}}{x}{y} | \neq \lam{y}{A}{\app{\var{y}}{\var{y}}}| \text!{// ダメ!}|}];
    こういった事態は\dfn{意図しない変数補足}と呼ばれたりします。こういった事態を避けるために、変数名の衝突が起きる場合にはλ抽象の束縛変数を衝突しないものに置き換える必要がでてきます。
    \align[
    ${| \subst{\paren{\lam{y}{A}{\app{\var{x}}{\var{y}}}}}{x}{y} | = \subst{\paren{\lam{z}{A}{\app{\var{x}}{\var{z}}}}}{x}{y} || \text!{// 束縛変数のyをzに置き換えると} |};
    ${| | = \lam{z}{A}{\app{\var{y}}{\var{z}}} || \text!{// オーケー} |}
    ];
    このようにちゃんとした置換を実装するためには意図しない変数補足が起きないように確認しつつ必要であれば束縛変数の名前を書き換えていく必要があるわけです\footnote{この束縛変数の名前の書き換えのことを\dfn{α変換}と呼びますが詳細は割愛します}。これをきちんと実装するのが一つ目の面倒くさいポイントです。β簡約に関してあまり本質的でない部分に実装を割かないといけないのがよろしくないですね。
    }
    +p{もう一つの面倒くさいポイントは「そもそもβ簡約を定義通りに実装するのがあまり直観的ではない」という点です\todo{ほんまかこれ}。}
    >
    
    +section {背景: Normalization by Evaluation} <
      +p{先程紹介したような簡約を用いた正規化以外にもλ項の正規形を得る方法はあります。それがこれから紹介する\dfn{Normalization by Evaluation}(NbE, 評価による正規化)です。基本的なアイデアは名前の通りで、λ項に対するeval関数を用いて正規形を得るというものです。}
      +p{一般的にeval(評価)関数とはプログラムのコードを受け取ってそれを実行した結果を返す関数のことです\footnote{RubyやPython、Javascriptなどのインタープリタを前提とした言語がサポートしていることが多い印象があります。あとCommon LispとかSchemeとかClojureとか。}。もう少し抽象的な解釈として、ここではeval関数を「λ項の集合からそれに対応する\dfn{意味}\footnote{要はsemanticsのことです。}の集合への関数」と考えることにしましょう。以降λ項の集合を${Term}、意味の集合を${Sem}と呼ぶことにします。
      \math-list(${| eval: Term \rightarrow Sem |});
      eval関数に対する妥当な仮定として以下のものを考えます。}

      +theorem?:({evalの健全性1}){${M}と${N}が同じ正規形を持つなら${eval\paren{M} = eval\paren{N}}である。\todo{定理ではない気がする}}

      +theorem?:({evalの健全性2}){${M}と${N}が同じ正規形を持たないなら${eval\paren{M} \neq eval\paren{N}}である。}

      +p{この性質から\emph{同じ正規形を持つ項はその場合に限って同じ意味を持つ}ということが言えるはずです。とすると、ある意味${s}が与えられた時に${eval\paren{M} = s}となるようなMのうちただ一つの正規形を選んでくることができるはずです。この関数は\dfn{reify}(具象化)関数と呼ばれます。以降、正規形からなる集合を${Norm}と呼びます。
      \math-list(${| reify: Sem \rightarrow Norm |});
      後は簡単で、このevalとreifyを組み合わせると項の正規形を与える関数になります。
      \math-list(${| normalize = reify \circ eval: Term \rightarrow Norm |});
      これがNbEの基本的なアイデアです。このアイデアのキモの部分はreify関数を如何に実装するかという点にありますが、実際にReasonでNbEを実装しながらその辺りを見ていくことにしましょう。\todo{何故Reason?}\todo{図があると見栄えがする}}

    +p{最初に${Sem}に対応するものとして\Code.code(`semantics`);という型を定義します。

    \Code.d-code(`
type semantics =
  | MBase(term)
  | MAbs(semantics => semantics);
    `);

    基底型の項に対応する意味が\Code.code(`MBase`);で、これは正規形の項をそのまま持ちます。型に\Code.code(`term`);を使っているのはReasonの型システムでは正規形を表現できないためです。また、関数型の項に対応する意味が\Code.code(`MAbs`);で、これは意味から意味への関数から成ります。}
    +p{STLCの項を評価するためには評価される項の他に自由変数に対応する意味を持つ\dfn{環境}が必要です。これを\Code.code(`env`);という型として定義しましょう。これは変数名を与えた時に対応する\Code.code(`semantics`);を返す関数として実装できます。空の環境\Code.code(`envEmpty`);は必ず\Code.code(`Undefined_variable`);を例外として投げます。また\Code.code(`envExt`);は変数名と\Code.code(`semantics`);のペアを受け取って既存の環境を拡張します。
   \Code.d-code(`
type env = string => semantics;

type exn +=
  | Undefined_variable;

let envEmpty: env = _ => raise(Undefined_variable);

let envExt: (string, semantics, env) => env =
  (name, sem, env) => (name2) =>
    if (name === name2) {
      sem;
    } else {
      env(name2);
    };

let envEmpty: env = _ => raise(Undefined_variable);

let envExt: (string, semantics, env) => env =
  (name, sem, env) => (name2) =>
    if (name === name2) {
      sem;
    } else {
      env(name2);
    };
    `);
    然る後に\Code.code(`eval`);の本体を書くことができます。項の構造に関する再帰を用いて素直に実装できます。変数の場合は環境から変数名に対応する意味を返す。λ抽象の場合は意味を受け取ってそれを環境に追加した上でλ抽象の本体を評価する関数を返す。適用の場合はそれぞれを評価した上で一つ目の意味が\Code.code(`MAbs`);になっているはずなのでこの関数に二つ目の意味を渡す。
    \Code.d-code(`
type exn +=
  | Wrong_application;

let rec eval: (term, environment) => semantics =
  (tm, env) => {
    switch (tm) {
    | Var(name) => env(name)
    | Abs(name, _, n) => MAbs(sem => evaluate(n, envExt(name, sem, env)))
    | App(n1, n2) =>
      let sem1 = evaluate(n1, env);
      let sem2 = evaluate(n2, env);

      switch (sem1) {
      | MAbs(f) => f(sem2)
      | MNat(_) => raise(Wrong_application)
      };
    };
  };
    `);
    というわけですんなりと\Code.code(`eval`);を実装することができました。いいですね。人生もこうすんなりといってほしいものです。}
    +p{最後に本題のreify関数を実装します。まず補助関数として新しい変数名を生成する関数を定義しておきます。
    \Code.d-code(`
let varCount = ref(0)
let gensym: unit => string =
  () => {
    let num = varCount^;
    varCount := num + 1;
    "x" ++ Js.Int.toString(num)
  }
    `);
    reify本体は以下のように定義できます。
    \Code.d-code(`
type exn +=
  | Illegal_type;

let rec reify: (semantics, typ) => term =
  (sem) => (ty) => {
    switch (sem) {
    | MBase(tm) => tm
    | MAbs(fn) => 
      switch (ty) {
      | Base => raise(Illegal_type)
      | Arr(ty1, ty2) =>
        let x = gensym();
        Abs(x, ty1, reify(fn(reflect(Var(x), ty1)), ty2))
      }
    }
  }
and reflect: (term, typ) => semantics =
  (tm, ty) => {
    switch(ty) {
    | Base => MBase(tm)
    | Arr(ty1, ty2) =>
      MAbs((sem) => reflect(App(tm, reify(sem, ty1)), ty2))
    }
  }
    `);
    \todo{何が起こっているかを説明する}
    }
    +p{以上がReasonによるNbEの実装です。\todo{SKIコンビネータとかで簡単な例を示す}}
    >
    +section {BelugaによるNormalization by Evaluationの定式化} <
      +p{さて、先ほどの実装にはいくつか問題点があります。\footnote{Reasonの型システムでもこれらの問題点をある程度解決することは可能です。Belugaがどのような問題を解決したいかを説明するためあえてダメな部分を含む実装にしています、ご了承ください。}
      \listing{
        * 束縛の管理に本質的でないコードが必要
        * 項が型判断を伴わない場合がある
        * 正規形の項の型がない
        * 上記の要因によって実行時エラーが発生しうる
      }
      Belugaはこれらの問題点をユニークな手法によって解決しており、型安全なNbEを実装することができます。ユニークな手法とは具体的には
      \listing{
        * 依存型及びLFによるプログラミング言語のエンコード
        * 文脈様相型による束縛の管理とメタレベルからの操作
      }
      を指すのですが、この章ではこれらがどういうものかを実際にコードを書いていきながら解説します。
      }
      +p{\todo{説明を書いていく}}
      +Code.code(`
LF tp : type =
| base : tp
| arr  : tp → tp → tp
;
  `);
      +Code.code(`
LF term : tp → type =
| app : term (arr a b) → term a → term b
| lam : (term a → term b) → term (arr a b)
;
      `);

      +Code.code(`
schema tctx = some [t : tp] block x : term t;

% we use old-style definition because
% we need both neut and norm at the same time
neut : tp → type.
norm : tp → type.
nlam : (neut a → norm b) → norm (arr a b).
rapp : neut (arr a b) → norm a → neut b.
embed : neut base → norm base.
      `);
    +Code.code(`
schema ctx = some [a:tp] block x:neut a;

stratified Sem : {g : ctx} [ ⊢ tp] -> ctype =
    | Base : [g ⊢ norm base] → Sem [g] [ ⊢ base]
    | Arr : {g : ctx} ({ h : ctx } {#S: [h ⊢ g]} Sem [h] [ ⊢ A] → Sem [h] [ ⊢ B]) → Sem [g] [ ⊢ arr A B]
;

rec sem_wkn : {h : ctx} {g : ctx} {#S : [h ⊢ g]} Sem [g] [ ⊢ A] → Sem [h] [ ⊢ A]  =
mlam h ⇒ mlam g ⇒ mlam S ⇒ fn e ⇒ case e of 
    | Base [g ⊢ R] ⇒ Base [h ⊢ R[#S]]
    | Arr [g] f ⇒ Arr [h] (mlam h' ⇒ mlam S' ⇒ f [h'] [h' ⊢ #S[#S']])
;

typedef Env : {g : tctx} {h : ctx} ctype =
{T : [ ⊢ tp]} {#p : [g ⊢ term T[]]} Sem [h] [ ⊢ T]
;

rec env_ext : Env [g] [h] → Sem [h] [ ⊢ S] → Env [g, x : term S[]] [h]  =
fn env ⇒ let  env : Env [g] [h] = env
          in fn sem ⇒ mlam T ⇒ mlam p ⇒ case [g, x : term _ ⊢ #p] of 
              | [ g, x : term S ⊢ x ] ⇒ sem
              | [ g, x : term S ⊢ #q[..] ] ⇒ env [ ⊢ T ] [ g ⊢ #q ]
;

rec env_wkn : {h' : ctx} {h : ctx} {#W : [h' ⊢ h]} Env [g] [h] → Env [g] [h']  =
mlam h' ⇒ mlam h ⇒ mlam W ⇒ fn env ⇒ 
    let env : Env [g] [h] = env
    in mlam T ⇒ mlam p ⇒ sem_wkn [h'] [h] [h' ⊢ #W] (env [ ⊢ T] [g ⊢ #p])
;

rec eval : [g ⊢ term S[]] → Env [g] [h] → Sem [h] [ ⊢ S]  =
fn tm ⇒ fn env ⇒
    let env : Env [g] [h] = env
    in case tm of
        | [g ⊢ #p] ⇒ env [ ⊢ _] [g ⊢ #p]
        | [g ⊢ lam (\x. E)] ⇒
              Arr [h] (mlam h' ⇒ mlam W ⇒ fn sem ⇒
                          eval [g, x : term _ ⊢ E] (env_ext (env_wkn [h'] [h] [h' ⊢ #W] env) sem))
        | [g ⊢ app E1 E2] ⇒ let Arr [h] f = eval [g ⊢ E1] env
                             in f [h] [h ⊢ ..] (eval [g ⊢ E2] env)
;
    `);
    +Code.code(`
mlam R ⇒ fn n ⇒ let [g ⊢ N] = n in [g ⊢ rapp R N];

rec reify : Sem [h] [ ⊢ A] → [h ⊢ norm A[]] =
fn sem ⇒ case sem of
    | Base [h ⊢ R] ⇒ [h ⊢ R]
    | Arr [g] f ⇒ let  [g, x : neut _ ⊢ N] =
                   reify (f [g, x : neut _] [g, x ⊢ ..] (reflect [g, x : neut _ ⊢ x]))
                   in [g ⊢ nlam (\x. N)]
and reflect : [h ⊢ neut A[]] → Sem [h] [ ⊢ A] =
fn n ⇒ let [h ⊢ R] : [h ⊢ neut A[]] = n
        in case [ ⊢ A] of
            | [ ⊢ base ] ⇒ Base [h ⊢ embed R]
            | [ ⊢ arr B C ] ⇒ Arr [h] (mlam h' ⇒ mlam W ⇒ fn tm ⇒
                                           reflect (app' [h' ⊢ R[#W]] (reify tm)))
;

rec nbe : Env [g] [h] → [g ⊢ term A[]] → [h ⊢ norm A[]] =
fn env ⇒ fn tm ⇒ reify (eval tm env)
;
    `);
    >
    +section {理論的背景について} <
    >
    +section {補遺} <
    >
  >
>
end
