@import: ../main/book-class
@import: maswag-math
@require: deco
@require: hdecoset

let path-to-root = `../MasWag/`

let-inline ctx \sample-command it =
  read-inline (ctx |> set-text-color Color.red) it

%%% Math
let-math \sequence x = ${\paren{#x}^\ast}
let-math \powerset set = ${\app{\mathcal{P}}{#set}}
let-math \bowtie = ${\Join}
let-math \colon = ${:}
let-math \iff = ${\Leftrightarrow}
let-math \Z = ${\mathbb{Z}}
let-math \R = ${\mathbb{R}}
let-math \Rp = ${\mathbb{R}_{> 0}}
let-math \Rnn = ${\mathbb{R}_{\geq 0}}
let-math \duration = ${t}
let-math \models = ${\vDash}
let-math \nmodels = ${\nvDash}

%%% Timed Words
let-math \event = ${\sigma}
let-math \eventi i = ${\event_{#i}}
let-math \ts = ${\tau}
let-math \tsi i = ${\tau_{#i}}
let-math \eventstyle a = ${\mathrm{#a}}
let-math \word = ${w}
let-math \wordWith = ${\word = \paren{\event_1,\tsi{1}},\paren{\event_2, \tsi{2}},\ldots,\paren{\event_n,\tsi{n}}}
let-math \alphabet = ${\mathrm{\Sigma}}

%%% Timed Automata
let-math \clock = ${c}
let-math \Clock = ${C}
let-math \resets = ${R}
let-math \guard = ${g}
let-math \Guard = ${\app{\Phi}{\Clock}}
let-math \Loc = ${Q}
let-math \loc = ${q}
let-math \InitLoc = ${Q_0}
let-math \AccLoc = ${Q_F}
let-math \Edge = ${\Delta}
let-math \edge = ${\delta}
let-math \edgeInside = ${\paren{\loc, \guard, \event, \resets,\loc'}}
let-math \edgei i si = ${\paren{\loc_{#i}, \guard_{#si}, \event_{#si}, \resets_{#si},\loc_{#si}}}
let-math \Autom = ${\mathcal{A}}
let-math \AutomWith = ${\mathcal{A} = \paren{\alphabet,\Loc,\InitLoc,\AccLoc,\Clock,\Edge}}

%%% TTS
let-math \CVal = ${\paren{\Rnn}^\Clock}
let-math \cval = ${\nu}
let-math \TTS = ${\mathcal{S}}
let-math \State = ${S}
let-math \state = ${s}
let-math \rstatei i = ${\paren{\loc_{#i},\cval_{#i}}}
let-math \InitState = ${S_0}
let-math \AccState = ${S_F}
let-math \TransitionRel = ${to}
let-math \Transition = let ord = math-char MathOrd in ord `→`
let-math \reset cval resets = ${\angle-bracket{#cval}_{#resets}}
let-math \initcval = ${\mathbb{0}_{\Clock}}
let-math \path = ${\pi}
let-math \Lg a = ${\app{\mathcal{L}}{#a}}


let-inline ctx \simple-frame it =
  let pads = (2pt, 2pt, 2pt, 2pt) in
  let decos = HDecoSet.simple-frame-stroke 1pt (Gray(0.5)) in
    inline-frame-breakable pads decos (read-inline ctx it)

let-block ctx +frame content =
  let pads = (10pt, 10pt, 10pt, 10pt) in
  let decoset = VDecoSet.simple-frame-stroke 1pt (Color.gray 0.75) in
    block-frame-breakable ctx pads decoset (fun ctx -> read-block ctx content)

let-block ctx +centering it =
  line-break true true ctx (inline-fil ++ read-inline ctx it ++ inline-fil)

let-block ctx +image-frame content =
  let pads = (10pt, 10pt, 10pt, 10pt) in
    block-frame-breakable ctx pads VDecoSet.empty (fun ctx -> read-block ctx '<+centering{#content;}>)

let-block ctx +image-frame-with-line content =
  let pads = (10pt, 10pt, 10pt, 10pt) in
  let decoset = VDecoSet.simple-frame-stroke 1pt Color.black in          
    block-frame-breakable ctx pads decoset (fun ctx -> read-block ctx '<+centering{#content;}>)

let-block ctx +myexample ?:labelopt it =
  let pads = (15pt, 15pt, 0pt, 0pt) in
  let decoset = VDecoSet.simple-frame-stroke 1pt (Gray(0.75)) in
  let bt =
    match labelopt with
    | None        -> '<+Book.example{#it;}>
    | Some(label) -> '<+Book.example?*?:(label){#it;}>
  in
    block-frame-breakable ctx pads decoset (fun ctx ->
      block-skip 0pt
        +++ read-block ctx bt
        +++ line-break false true (ctx |> set-paragraph-margin 0pt 0pt) inline-fil
    )

let-block ctx +problem title input output =
  let pads = (5pt, 5pt, 0pt, 0pt) in
  let decoset = VDecoSet.simple-frame-stroke 1pt (Gray(0.75)) in
    block-frame-breakable ctx pads decoset (fun ctx ->
      block-skip 0pt
        +++ (let ctx-title = ctx
                     |> set-font HanIdeographic (`ipaexg`, 1.0, 0.)
                     |> set-font Kana (`ipaexg`, 1.0, 0.) in 
                line-break false false ctx-title (read-inline ctx-title {\simple-frame{#title;}}))
        +++ read-block ctx '<
                +p{\emph{入力}: #input;}
                +p{\emph{出力}: #output;}
        >
        +++ line-break false true (ctx |> set-paragraph-margin 0pt 0pt) inline-fil
    )

let-inline ctx \insert-image w path =
  let img = load-image path in
    use-image-by-width img w

let-inline ctx \insert-pdf-image w path page =
  let img = load-pdf-image path page in
    use-image-by-width img w

let-inline ctx \skip length =
    inline-skip length
let-inline ctx \promote-linebreak ib0 ib1 ib2 =
    discretionary (0-100000) (read-inline ctx ib0) (read-inline ctx ib1) (read-inline ctx ib2)
let-inline ctx \promote-linebreak =
    discretionary (0-100000) inline-nil inline-nil inline-nil
let-math \lb-math = text-in-math MathOrd (fun ctx -> read-inline ctx {\promote-linebreak;})