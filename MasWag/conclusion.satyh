@import: local

let conclusion = '<+section{まとめ} <
+p {
本章ではモニタリングのための時間オートマトン入門ということで所属性判定問題の計算量を紹介しました。
モニタリングのためという観点では、所属性判定問題は入力の時刻付きワードの長さについて多項式時間で解け、特に時間オートマトンが決定的である場合には時刻付きワードの長さについて線形時間で解くことができます。
従って、決定的時間オートマトンによって記述された仕様についてのモニタリングは効率的に解けることが期待できます。\footnote{時刻付きワード${\word}の長さについて線形時間で解くことができると言っても、定数部分が大きい場合など現実的にあまり効率的に所属性判定ができない場合もあります。また、時間パターンマッチング問題\cite([`conf/formats/UlusFAM14`;`conf/formats/WagaHS17`]);など、モニタリングによって解きたい問題によっては決定的であることより強い制約がないと、時刻付きワード${\word}の長さについて線形時間でモニタリングすることができない場合もあります。}
}
+p {
(非決定的)時間オートマトンが表現する言語のクラスは決定的時間オートマトンが表現する言語のクラスより真に大きいため\cite([`journals/tcs/AlurD94`]);、NFAをDFAに変換するように、(非決定的)時間オートマトンを決定的時間オートマトンに変換することは一般にはできませんし、そもそも(非決定的)時間オートマトンを決定化可能であるかを判定することすら決定不能です\cite([`conf/formats/Finkel06`]);。
一方で、(非決定的)時間オートマトンを近似的に決定化する方法として、one-clock determinization\cite([`journals/fmsd/KrichenT09`]);やbounded determinization \cite([`journals/rts/LorberRNA17`]);などの手法が知られています。
これらの手法を使うことで、誤検出が許される場合においては、一般の時間オートマトンについてある程度効率良くモニタリングを行うことができることが期待できます。
}
+p {
また、NFAやDFAにおいて培われてきた様々なアルゴリズムを時間オートマトンに適用することで、モニタリング問題に限らず時間オートマトンについての諸問題をより効率的に解くことは非常に興味深いと思います。
}
>
>