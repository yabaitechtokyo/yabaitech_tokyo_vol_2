@require: itemize
@import: local
@import: bib

let introduction = '<+section{はじめに} <
+p {
  本章では、モニタリングのための時間オートマトン入門と題して、時間オートマトンの所属性判定問題について解説します。モニタリングは、広い意味では様々なシステムなどの様子を外部から観察することで、システムの異常などを検知することを指しますが、ここでは\dfn{実行時検証 (runtime verification)} \cite([`series/lncs/10457`]);と同義として扱います。実行時検証とは、システムに要求される\emph{仕様}や、逆に\emph{異常な挙動}の定義を数学の言葉で\emph{形式的に}与え、それをシステムの動作ログと照し合わせることでシステムの異常を検知する手法のことです。実行時検証はモデル検査などの網羅的な形式手法と比べて、網羅性は欠いてしまうものの、複雑すぎてモデル検査がスケールしないシステムや、ブラックボックスなシステムに対しても適応可能であるという特徴があります。実行時検証は数学的には例えば以下の様に定義されます。
  システムの仕様${\phi}を記述する論理としては例えば線形時相論理 (Linear Temporal Logic, LTL)や有限オートマトンなどを用いることができます。
}
+problem{実行時検証}
 {システムの動作ログ ${\word}とシステムの仕様${\phi}}
 {システムの動作ログ${\word}が仕様${\phi}を充たすかどうかを判定する。つまり${\word \models \phi}や${\word \in \Lg{\phi}}であるかどうかを判定する。}
+p{
\figure ?:(`fig:TA`){時間オートマトンの例。5秒以内の${abab\ldots}の繰り返しで、直近の${b}からの時間経過が1秒以内であるような言語を表現する。}<
   +image-frame{
   \insert-pdf-image(7.5cm)(`../MasWag/figs/timed_automaton.pdf`)(1);
}
>
本章ではシステムの仕様${\phi}を記述する論理として\dfn{時間オートマトン}を考えます。
時間オートマトンは、例えば\ref-figure(`fig:TA`); にある様に、非決定的有限オートマトン (NFA) に時間についての条件を追加したものです。
入力のログとして、実数値のタイムスタンプ付きのイベントの列 (\dfn{時刻付きワード、timed word}) を考えます。
時間についての制約を用いることで、例えば「リクエストを送ってから30秒以内にレスポンスが返って来ないといけない」や「自動車は10分以内に3回以上車線変更をしてはいけない」などの仕様を記述することができます。
\footnote{NFA等を用いても、例えば「各イベントが30秒周期で発生する」などの仮定を用いると上記の仕様を記述することができますが、時間オートマトンなどを用いて時間を陽に扱うことで、より柔軟に時間についての制約を扱うことができます。}
}
+p {
モニタリングの文脈では、時刻付きワードを見て「異常」を検出したいのですから、\emph{所属性判定}が重要となります。
本章では、時間オートマトンの所属性判定問題を解くアルゴリズムと、その計算量を紹介します。
}
+problem{所属性判定問題 (membership problem)}
 {文字集合${\alphabet}上の時間オートマトン${\Autom}と時刻付きワード ${\word}}
 {${\word \in \Lg{\Autom}} であるかどうかを判定する。}
+p{
例えば決定的オートマトン (DFA)についての所属性判定であれば素朴にオートマトンの上の状態を辿る方法や、遷移行列を考えて行列積を求めていく方法などによって、入力ワード長について線形時間で解くことができます。
一方で時間オートマトンの場合は、素朴にオートマトンの上の「状態」を辿る方法だと非決定的分岐によってどのくらいの状態を辿る必要があるのかすぐにはわからないですし、時間制約があるので遷移行列を使って解く方法は、少なくともそのまま適用することはできません。
}
+subsection{関連する論文・トピック} <
+p {
時間オートマトンの所属性判定問題の計算量解析は\cite([`conf/rtss/AlurKV98`]);において証明されています。
所属性判定問題がNP完全であるという結果は本章で述べているものと同じですが、時間オートマトンの定義が本章のものと異なるため、用いている構成にも若干の違いがあります。
また、本章ではモニタリングの文脈を想定しているので、時間オートマトンの大きさについての時間計算量のみではなく、時刻付きワードの長さについての時間計算量も紹介しています。
}
+p {
時間オートマトンなど、時間を陽に扱う仕様を用いたモニタリングは、物理情報システム (Cyber-physical system, CPS)の文脈などで広く研究されています\cite([`series/lncs/BartocciDDFMNS18`]);。
線形時相論理に対して、時間オートマトンの様に、陽に時間についての制約を加えた論理として\dfn{計量時相論理} (Metric temporal logic, MTL)\cite([`journals/rts/Koymans90`]);や\dfn{シグナル時相論理} (Signal temporal logic, STL) \cite([`conf/formats/MalerN04`]);などが知られています。
正規表現に対して、時間オートマトンの様に、陽に時間についての制約を加えた論理としては、\dfn{時間正規表現} (Timed regular expression, TRE)\cite([`journals/jacm/AsarinCM02`]);が知られています。
また、シグナル時相論理については、充足するかしないかのブール値を返すのではなく、充足の度合いを実数値で返す、ロバスト意味論も知られており\cite([`conf/formats/DonzeM10`]);、物理情報システムの反例生成問題 (falsification)などで広く使われています\cite([`conf/cav/Donze10`;`conf/tacas/AnnpureddyLFS11`]);。
}
+p{
これらの論理式を用いる利点としては、オートマトンよりも記述しやすいという点が挙げられます。
一方で時間オートマトンを用いることで、NFAやDFAにおいて用いられた技術を流用しやすいということや、そもそもMITLやTREは時間オートマトンへの変換が可能であるため、共通の基盤言語として時間オートマトンを用いることに大きな意義があると考えられます。
}
+p {
また、時間オートマトンはモデル検査の文脈でも広く用いられており、有名なツールとしては例えばUppaal\cite([`conf/qest/BehrmannDLHPYH06`]);などがあります。
}
>
+subsection{本章の構成} <
+p {
 本章の構成は以下のようになります。まず第二節で時間オートマトンの定義を与えます。
第三節では所属性判定の定義と、所属性判定の計算量について説明します。
}
>
+subsection{記法と仮定} <
+p {
  本章では実数の集合を${\R}、整数の集合を${\Z}を、自然数の集合を${\Znn}を用いて表わします。
また、例えば非負実数の集合を${\Rnn}と表記します。
集合${X}について、${X}の冪集合を${\powerset{X}}と表記します。集合${X}について、${X}の元からなる有限列の集合を${X^\ast}と表記します。%また、真理値を${\mathrm{T}}と${\mathrm{F}}を用いて表わします。また、数式中で変数及び単なる文字としてラテン文字が表われますが、原則として変数として用いるときには${a}の様に斜体で、文字として用いるときは${\text!{a}}のように立体で表記します。
}
+p {
本章では、「普通の」オートマトンの話 (例えば\cite([`HopcroftMU2003`]); にあるような内容)は特に説明しません。オートマトンの理論的な前提知識はあまり必要ないですが、例えば非決定的分岐の気持ちなどは予めわかっておくと良いかもしれません。またNP完全問題の定義がわかる程度の計算量の知識を前提とします。その他よく使われる論理や集合の記号は特に断りなく用います。
また、本章ではできるだけ用語を日本語に訳す様にしてあります。時間オートマトンについての用語は定訳がないものも多く、独自で訳したものもあるのでご了承ください。
}
>
>
>