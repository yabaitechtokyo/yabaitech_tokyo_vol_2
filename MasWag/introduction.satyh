@require: itemize
@import: local
@import: bib

let introduction = '<+section{はじめに} <
+p {
  本章では、モニタリングのための時間オートマトン入門と題して、時間オートマトンの所属性判定問題について解説します。モニタリングは、広い意味では様々なシステムなどの様子を外部から観察することで、システムの異常などを検知することを指しますが、ここでは実行時検証 (runtime verification) と同義として扱います。実行時検証とは、システムに要求される仕様や、逆に異常な挙動の定義を形式的に与え、それをシステムの動作ログと照し合わせることでシステムの異常を検知する手法のことです。モデル検査などの網羅的な形式手法と比べて、網羅性は欠いてしまうものの、複雑なシステムに対しても適応可能であるという特徴があります。実行時検証は数学的には例えば以下の様に定義されます。
  システムの仕様${\phi}を記述する論理としては例えば線形時相論理 (Linear Temporal Logic, LTL)や有限オートマトンなど様々な論理を用いることができます。
}
+problem{実行時検証}
 {システムの動作ログ ${\word}とシステムの仕様${\phi}}
 {システムの動作ログ${\word}が仕様${\phi}を充たすかどうかを判定する。つまり${\word \models \phi}であるかどうかを判定する。}
+p{
\figure ?:(`fig:TA`){時間オートマトンの例}<
   +image-frame{
   \insert-pdf-image(8cm)(`../MasWag/figs/timed_automaton.pdf`)(1);
}
>
ここではシステムの仕様${\phi}を記述する論理として\dfn{時間オートマトン}を考えます。
時間オートマトンは、例えば\ref-figure(`fig:TA`); にある様に、非決定的有限オートマトン (NFA) に時間についての条件を追加したものです。
入力のログとして、実数値のタイムスタンプ付きのイベントの列を考えます。
時間についての制約を用いることで、例えば「リクエストを送ってから30秒以内にレスポンスが返って来ないといけない」や「自動車は10分以内に3回以上車線変更をしてはいけない」などの仕様を記述することができます。
\footnote{NFA等を用いても、例えば「各イベントが30秒周期で発生する」などの仮定を用いると上記の仕様を記述することができますが、時間オートマトンなどの時間を陽に扱う仕様であればより柔軟に時間についての制約を扱うことができます。}
}
+p {
TODO: 仮定について書く。
}
+p {
TODO: 関連研究について書く
}
+p {
 本章の構成は以下のようになります。まず第二節で時間オートマトンの定義を与えます。
第三節では所属性判定の定義と、所属性判定の計算量について説明します。
第四節では所属性判定問題について計算機実験をして、第三節で紹介した計算量を実際に確かめてみます。
}
+subsection{記法} <
+p {
  本章では実数の集合を${\mathbb{R}}、自然数の集合を${\mathbb{N}}を用いて表わします。%また、真理値を${\mathrm{T}}と${\mathrm{F}}を用いて表わします。また、数式中で変数及び単なる文字としてラテン文字が表われますが、原則として変数として用いるときには${a}の様に斜体で、文字として用いるときは${\text!{a}}のように立体で表記します。
}
>
>
>